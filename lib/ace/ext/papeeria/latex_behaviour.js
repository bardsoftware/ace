// Generated by CoffeeScript 1.12.6
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  define(function(require, exports, module) {
    var Behaviour, LatexBehaviour, correspondingClosing, dollarsDeletionAction, dollarsInsertionAction, getBracketInsertionAction, getBracketsDeletionAction, getWrapped, isCommentToken, isEscaped, isInEquation;
    Behaviour = require("ace/mode/behaviour").Behaviour;
    isCommentToken = function(token) {
      return (token != null) && /comment/.test(token.type);
    };
    isEscaped = function(line, column) {
      return line[column - 1] === '\\' && line[column - 2] !== '\\';
    };
    isInEquation = function(session, row, column) {
      var lastPrevState, lastState, nextToken, pState, state, token;
      token = session.getTokenAt(row, column);
      nextToken = session.getTokenAt(row, column + 1);
      state = session.getState(row);
      pState = session.getState(row - 1);
      lastState = typeof state === "string" ? state : state[state.length - 1];
      lastPrevState = typeof pState === "string" ? pState : pState[pState.length - 1];
      return ((token == null) && /math/.test(lastPrevState)) || ((token != null) && /equation/.test(token.type)) || ((nextToken != null) && /equation/.test(nextToken.type)) || ((nextToken == null) && /math/.test(lastState));
    };
    dollarsInsertionAction = function(state, action, editor, session, text) {
      var autoInsert, column, doNothing, line, nextChar, nextToken, prevChar, ref, row, selected, selection, shouldSkip, skip, token;
      if (text === '$' && !editor.inMultiSelectMode) {
        autoInsert = {
          text: "$$",
          selection: [1, 1]
        };
        skip = {
          text: "",
          selection: [1, 1]
        };
        doNothing = null;
        ref = editor.getCursorPosition(), row = ref.row, column = ref.column;
        line = session.getLine(row);
        selection = editor.getSelectionRange();
        selected = session.getTextRange(selection);
        if (selected !== "") {
          if (editor.getWrapBehavioursEnabled()) {
            return getWrapped(selection, selected, text, text);
          } else {
            return doNothing;
          }
        }
        token = session.getTokenAt(row, column);
        nextToken = session.getTokenAt(row, column + 1);
        if (isCommentToken(token) && column !== 0 || isEscaped(line, column)) {
          return doNothing;
        }
        prevChar = line[column - 1] || '';
        nextChar = line[column] || '';
        if (isInEquation(session, row, column)) {
          if (nextChar === '$') {
            return skip;
          } else {
            return doNothing;
          }
        }
        shouldSkip = nextChar === '$' && (prevChar !== '$' || /rparen/.test(nextToken.type));
        if (shouldSkip) {
          return skip;
        } else {
          return autoInsert;
        }
      }
    };
    dollarsDeletionAction = function(state, action, editor, session, range) {
      var line, nextChar, selected, token;
      selected = session.doc.getTextRange(range);
      if (range.isMultiLine() || selected !== '$') {
        return null;
      }
      line = session.getLine(range.start.row);
      token = session.getTokenAt(range.end.row, range.end.column);
      nextChar = line[range.start.column + 1];
      if (nextChar === '$' && !/escape/.test(token.type)) {
        range.end.column++;
        return range;
      }
    };
    getWrapped = function(selection, selected, opening, closing) {
      var rowDiff;
      rowDiff = selection.end.row - selection.end.row;
      return {
        text: opening + selected + closing,
        selection: [0, selection.start.column + 1, rowDiff, selection.end.column + (rowDiff !== 0 ? 0 : 1)]
      };
    };
    correspondingClosing = {
      '(': ')',
      '[': ']',
      '{': '}'
    };
    getBracketInsertionAction = function(opening) {
      var closing;
      closing = correspondingClosing[opening];
      return function(state, action, editor, session, text) {
        var column, line, matching, nextChar, ref, ref1, row, selected, selection, shouldComplete, token;
        ref = editor.getCursorPosition(), row = ref.row, column = ref.column;
        line = session.getLine(row);
        switch (text) {
          case opening:
            selection = editor.getSelectionRange();
            selected = session.getTextRange(selection);
            if (selected !== "") {
              if (editor.getWrapBehavioursEnabled()) {
                return getWrapped(selection, selected, opening, closing);
              } else {
                return null;
              }
            }
            token = session.getTokenAt(row, column);
            if (isEscaped(line, column)) {
              shouldComplete = opening !== '{' && !isInEquation(session, row, column);
              if (shouldComplete) {
                return {
                  text: opening + '\\' + closing,
                  selection: [1, 1]
                };
              } else {
                return null;
              }
            }
            if (!((ref1 = editor.completer) != null ? ref1.activated : void 0) && !(isCommentToken(token) && column !== 0)) {
              return {
                text: opening + closing,
                selection: [1, 1]
              };
            }
            break;
          case closing:
            nextChar = line[column];
            if (nextChar === closing) {
              matching = session.$findOpeningBracket(closing, {
                column: column + 1,
                row: row
              });
              if (matching != null) {
                return {
                  text: "",
                  selection: [1, 1]
                };
              } else {
                return null;
              }
            }
            if (opening === '{') {
              return null;
            }
            if (nextChar === "\\" && line[column + 1] === closing && isInEquation(session, row, column)) {
              return {
                text: "",
                selection: [2, 2]
              };
            }
        }
      };
    };
    getBracketsDeletionAction = function(opening) {
      var closing;
      closing = correspondingClosing[opening];
      return function(state, action, editor, session, range) {
        var column, line, nextChar, nextNextChar, prevChar, ref, row, selected;
        if (range.isMultiLine()) {
          return null;
        }
        selected = session.doc.getTextRange(range);
        if (selected !== opening) {
          return null;
        }
        ref = range.start, row = ref.row, column = ref.column;
        line = session.doc.getLine(row);
        nextChar = line[column + 1];
        if (nextChar === closing) {
          range.end.column += 1;
          return range;
        }
        if (opening === '{') {
          return null;
        }
        prevChar = line[column - 1];
        nextNextChar = line[column + 2];
        if (prevChar === '\\' && nextChar === '\\' && nextNextChar === closing) {
          range.end.column += 2;
          return range;
        }
      };
    };
    LatexBehaviour = (function(superClass) {
      extend(LatexBehaviour, superClass);

      function LatexBehaviour() {
        this.add("dollars", "insertion", dollarsInsertionAction);
        this.add("dollars", "deletion", dollarsDeletionAction);
        this.add("braces", "insertion", getBracketInsertionAction('{'));
        this.add("braces", "deletion", getBracketsDeletionAction('{'));
        this.add("parens", "insertion", getBracketInsertionAction('('));
        this.add("parens", "deletion", getBracketsDeletionAction('('));
        this.add("brackets", "insertion", getBracketInsertionAction('['));
        this.add("brackets", "deletion", getBracketsDeletionAction('['));
      }

      return LatexBehaviour;

    })(Behaviour);
    exports.LatexBehaviour = LatexBehaviour;
  });

}).call(this);

//# sourceMappingURL=latex_behaviour.js.map
