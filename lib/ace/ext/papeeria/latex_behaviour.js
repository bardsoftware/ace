// Generated by CoffeeScript 1.12.6
(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  define(function(require, exports, module) {
    var Behaviour, CStyleBehaviour, LatexBehaviour;
    Behaviour = require("ace/mode/behaviour").Behaviour;
    CStyleBehaviour = require("ace/mode/behaviour/cstyle");
    LatexBehaviour = (function(superClass) {
      extend(LatexBehaviour, superClass);

      LatexBehaviour.getWrapped = function(selection, selected, opening, closing) {
        var rowDiff;
        rowDiff = selection.end.row - selection.end.row;
        return {
          text: opening + selected + closing,
          selection: [0, selection.start.column + 1, rowDiff, selection.end.column + (rowDiff !== 0 ? 0 : 1)]
        };
      };

      function LatexBehaviour() {
        this.dollarsDeletionBehaviour = bind(this.dollarsDeletionBehaviour, this);
        this.dollarsInsertionBehaviour = bind(this.dollarsInsertionBehaviour, this);
        this.$behaviours = {};
        this.add("dollars", "insertion", this.dollarsInsertionBehaviour);
        this.add("dollars", "deletion", this.dollarsDeletionBehaviour);
      }

      LatexBehaviour.prototype.dollarsInsertionBehaviour = function(state, action, editor, session, text) {
        var column, inEquation, lastState, line, nextChar, nextToken, prevChar, ref, row, selected, selection, token;
        if (text === '$') {
          ref = editor.getCursorPosition(), row = ref.row, column = ref.column;
          line = session.getLine(row);
          token = session.getTokenAt(row, column);
          if (token == null) {
            return {
              text: "$$",
              selection: [1, 1]
            };
          }
          if (/comment/.test(token.type)) {
            return null;
          }
          selection = editor.getSelectionRange();
          selected = session.getTextRange(selection);
          if (selected !== "") {
            if (editor.getWrapBehavioursEnabled()) {
              return LatexBehaviour.getWrapped(selection, selected, text, text);
            } else {
              return null;
            }
          }
          prevChar = line.substring(column - 1, column);
          nextChar = line.substring(column, column + 1);
          if (/escape/.test(token.type) && token.value !== "\\\\") {
            return null;
          }
          nextToken = session.getTokenAt(row, column + 1);
          lastState = typeof state === "string" ? state : state[state.length - 1];
          inEquation = /equation/.test(token.type) || ((nextToken != null) && /equation/.test(nextToken.type)) || ((nextToken == null) && /math/.test(lastState));
          if (inEquation) {
            if (nextChar === '$') {
              return {
                text: "",
                selection: [1, 1]
              };
            } else {
              return null;
            }
          }
          if (nextChar === '$' && (prevChar !== '$' || /rparen/.test(nextToken.type))) {
            return {
              text: "",
              selection: [1, 1]
            };
          }
          return {
            text: "$$",
            selection: [1, 1]
          };
        }
      };

      LatexBehaviour.prototype.dollarsDeletionBehaviour = function(state, action, editor, session, range) {
        var line, nextChar, selected, token;
        selected = session.doc.getTextRange(range);
        if (range.isMultiLine() || selected !== '$') {
          return null;
        }
        line = session.getLine(range.start.row);
        token = session.getTokenAt(range.end.row, range.end.column);
        nextChar = line.substring(range.start.column + 1, range.start.column + 2);
        console.log(token);
        if (nextChar === '$' && !/escape/.test(token.type)) {
          range.end.column++;
          return range;
        }
      };

      return LatexBehaviour;

    })(Behaviour);
    exports.LatexBehaviour = LatexBehaviour;
  });

}).call(this);
