// Generated by CoffeeScript 1.10.0
(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  define(['ace/autocomplete', 'ace/ext/papeeria/spellchecker'], function(Autocomplete, SpellChecker) {
    var PopupManager, convertCorrectionList, extractWord, getCurrentWordRange, setup;
    getCurrentWordRange = function(editor) {
      var col, row, session;
      session = editor.getSession();
      row = editor.getCursorPosition().row;
      col = editor.getCursorPosition().column;
      return session.getWordRange(row, col);
    };
    convertCorrectionList = function(corrections) {
      var item;
      return (function() {
        var i, len, results;
        results = [];
        for (i = 0, len = corrections.length; i < len; i++) {
          item = corrections[i];
          results.push({
            caption: item,
            value: item
          });
        }
        return results;
      })();
    };
    extractWord = function(editor) {
      var session, wordRange;
      session = editor.getSession();
      wordRange = getCurrentWordRange(editor);
      return session.getTextRange(wordRange);
    };
    setup = function(editor) {
      var command;
      command = {
        name: "spellCheckPopup",
        exec: function() {
          if (!editor.spellCheckPopup) {
            editor.spellCheckPopup = new PopupManager(editor);
          }
          return editor.spellCheckPopup.showPopup(editor);
        },
        bindKey: "Alt-Enter"
      };
      editor.commands.addCommand(command);
    };
    PopupManager = (function(superClass) {
      extend(PopupManager, superClass);

      function PopupManager() {
        this.insertMatch = bind(this.insertMatch, this);
        this.gatherCompletions = bind(this.gatherCompletions, this);
        PopupManager.__super__.constructor.call(this);
      }

      PopupManager.prototype.gatherCompletions = function(editor, callback) {
        var correctionsList, position, session, spellChecker, word;
        session = editor.getSession();
        position = editor.getCursorPosition();
        this.base = session.doc.createAnchor(position.row, position.column);
        word = extractWord(editor);
        spellChecker = new SpellChecker.SpellChecker();
        correctionsList = spellChecker.getCorrections(word);
        if (correctionsList) {
          callback(null, {
            prefix: "",
            matches: convertCorrectionList(correctionsList),
            finished: true
          });
        }
        return true;
      };

      PopupManager.prototype.insertMatch = function(data, options) {
        var wordRange;
        if (!data) {
          data = this.popup.getData(this.popup.getRow());
        }
        wordRange = getCurrentWordRange(this.editor);
        this.editor.getSession().replace(wordRange, data.value || data);
        this.detach();
      };

      return PopupManager;

    })(Autocomplete.Autocomplete);
    return {
      setup: setup
    };
  });

}).call(this);

//# sourceMappingURL=spellchecker_popup.js.map
