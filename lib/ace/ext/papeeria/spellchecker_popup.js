// Generated by CoffeeScript 1.11.1
(function() {
  var foo,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  foo = null;

  define(function(require, exports, module) {
    var Autocomplete, Spellchecker, SpellcheckerCompleter, convertCorrectionList, extractWord, getCurrentWordRange, mySpellcheckerPopup, setup;
    Autocomplete = require('ace/autocomplete');
    Spellchecker = require('ace/ext/papeeria/spellchecker');
    getCurrentWordRange = function(editor) {
      var col, row, session;
      session = editor.getSession();
      row = editor.getCursorPosition().row;
      col = editor.getCursorPosition().column;
      return session.getWordRange(row, col);
    };
    convertCorrectionList = function(corrections) {
      var i, item;
      return (function() {
        var j, len, results;
        results = [];
        for (i = j = 0, len = corrections.length; j < len; i = ++j) {
          item = corrections[i];
          results.push({
            caption: item,
            value: item,
            meta: "",
            score: corrections.length - i
          });
        }
        return results;
      })();
    };
    extractWord = function(editor) {
      var session, wordRange;
      session = editor.getSession();
      wordRange = getCurrentWordRange(editor);
      return session.getTextRange(wordRange);
    };
    mySpellcheckerPopup = null;
    setup = function(editor, onReplaced) {
      var command;
      mySpellcheckerPopup = new SpellcheckerCompleter(onReplaced);
      command = {
        name: "spellCheckPopup",
        exec: function() {
          editor.completer = mySpellcheckerPopup;
          return editor.completer.showPopup(editor);
        },
        bindKey: "Alt-Enter"
      };
      return editor.commands.addCommand(command);
    };
    SpellcheckerCompleter = (function(superClass) {
      extend(SpellcheckerCompleter, superClass);

      function SpellcheckerCompleter(onReplaced1) {
        this.onReplaced = onReplaced1 != null ? onReplaced1 : function() {};
        this.insertMatch = bind(this.insertMatch, this);
        this.gatherCompletions = bind(this.gatherCompletions, this);
        this.isDisposable = true;
        SpellcheckerCompleter.__super__.constructor.call(this);
      }

      SpellcheckerCompleter.prototype.gatherCompletions = function(editor, callback) {
        var position, session, word;
        session = editor.getSession();
        position = editor.getCursorPosition();
        this.base = session.doc.createAnchor(position.row, position.column);
        word = extractWord(editor);
        Spellchecker.getInstance().getCorrections(word, function(correctionsList) {
          return callback(null, {
            prefix: "",
            matches: convertCorrectionList(correctionsList),
            finished: true
          });
        });
        return true;
      };

      SpellcheckerCompleter.prototype.insertMatch = function(data, options) {
        var replacement, typo, wordRange;
        if (data == null) {
          data = this.popup.getData(this.popup.getRow());
        }
        wordRange = getCurrentWordRange(this.editor);
        typo = this.editor.getSession().getTextRange(wordRange);
        replacement = data.value || data;
        this.editor.getSession().replace(wordRange, replacement);
        this.onReplaced(typo, replacement);
        return this.detach();
      };

      return SpellcheckerCompleter;

    })(Autocomplete.Autocomplete);
    return {
      setup: setup
    };
  });

}).call(this);
