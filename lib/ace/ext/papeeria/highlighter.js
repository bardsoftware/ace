// Generated by CoffeeScript 1.10.0
(function() {
  var indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  define(function(require, exports, module) {
    var Range, findSurroundingBrackets, highlightBrackets;
    Range = require("ace/range").Range;
    highlightBrackets = function(editor) {
      var cursorPosition, pos, range, rangeLeft, rangeRight, ref, session;
      pos = findSurroundingBrackets(editor);
      session = editor.getSession();
      cursorPosition = editor.getCursorPosition();
      if (session.$bracketHighlightRight || session.$bracketHighlightLeft) {
        session.removeMarker(session.$bracketHighlightLeft);
        session.removeMarker(session.$bracketHighlightRight);
        session.$bracketHighlightLeft = null;
        session.$bracketHighlightRight = null;
      }
      if (pos.mismatch && (ref = session.getLine(cursorPosition.row).charAt(cursorPosition.column - 1), indexOf.call(session.$brackets, ref) >= 0)) {
        pos.mismatch = false;
        pos.right = {
          row: cursorPosition.row,
          column: cursorPosition.column - 1
        };
      }
      if (!pos.mismatch) {
        rangeLeft = new Range(pos.left.row, pos.left.column, pos.left.row, pos.left.column + 1);
        rangeRight = new Range(pos.right.row, pos.right.column, pos.right.row, pos.right.column + 1);
        session.$bracketHighlightLeft = session.addMarker(rangeLeft, "ace_bracket", "text");
        return session.$bracketHighlightRight = session.addMarker(rangeRight, "ace_bracket", "text");
      } else {
        if (pos.left && pos.right) {
          range = new Range(pos.left.row, pos.left.column, pos.right.row, pos.right.column + 1);
          session.$bracketHighlightLeft = session.addMarker(range, "ace_error-marker", "text");
        }
        if (pos.left && !pos.right) {
          rangeLeft = new Range(pos.left.row, pos.left.column, Infinity, Infinity);
          session.$bracketHighlightLeft = session.addMarker(rangeLeft, "ace_error-marker", "text");
        }
        if (pos.right && !pos.left) {
          rangeRight = new Range(0, 0, pos.right.row, pos.right.column + 1);
          return session.$bracketHighlightRight = session.addMarker(rangeRight, "ace_error-marker", "text");
        }
      }
    };
    findSurroundingBrackets = function(editor) {
      var allBrackets, expectedRightBracket, key, leftCandidate, leftNearest, position, result, rightBracket, rightCandidate, rightNearest, session;
      position = editor.getCursorPosition();
      session = editor.getSession();
      allBrackets = {
        left: [session.$findOpeningBracket('}', position, /(\.?.paren)+/), session.$findOpeningBracket(']', position, /(\.?.paren)+/), session.$findOpeningBracket(')', position, /(\.?.paren)+/)],
        right: [session.$findClosingBracket('{', position, /(\.?.paren)+/), session.$findClosingBracket('[', position, /(\.?.paren)+/), session.$findClosingBracket('(', position, /(\.?.paren)+/)]
      };
      leftNearest = null;
      rightNearest = null;
      key = 0;
      while (key < allBrackets.left.length) {
        leftCandidate = allBrackets.left[key];
        rightCandidate = allBrackets.right[key];
        if (!leftNearest) {
          leftNearest = leftCandidate;
        }
        if (!rightNearest) {
          rightNearest = rightCandidate;
        }
        if (leftCandidate) {
          if (leftNearest.row <= leftCandidate.row) {
            if (leftNearest.row === leftCandidate.row) {
              if (leftNearest.column < leftCandidate.column) {
                leftNearest = leftCandidate;
              }
            } else {
              leftNearest = leftCandidate;
            }
          }
        }
        if (rightCandidate) {
          if (rightNearest.row >= rightCandidate.row) {
            if (rightNearest.row === rightCandidate.row) {
              if (rightNearest.column > rightCandidate.column) {
                rightNearest = rightCandidate;
              }
            } else {
              rightNearest = rightCandidate;
            }
          }
        }
        key++;
      }
      result = {
        left: leftNearest,
        right: rightNearest,
        mismatch: true
      };
      if (result.left && result.right) {
        expectedRightBracket = session.$brackets[session.getLine(leftNearest.row).charAt(leftNearest.column)];
        rightBracket = session.getLine(rightNearest.row).charAt(rightNearest.column);
        if (expectedRightBracket === rightBracket) {
          result.mismatch = false;
        }
      }
      return result;
    };
    return exports.highlighter = {
      highlightBrackets: highlightBrackets
    };
  });

}).call(this);
