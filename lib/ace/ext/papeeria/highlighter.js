// Generated by CoffeeScript 1.10.0
(function() {
  var foo;

  foo = null;

  define(function(require, exports, module) {
    var Range, TokenIterator, clearCurrentHighlight, findSurroundingBrackets, highlightBrackets, init, newFakeToken, newFilteringIterator, ourOffscreenTextDisplay, toggleSurroundingBracketsPopup;
    ourOffscreenTextDisplay = null;
    Range = require("ace/range").Range;
    TokenIterator = require("ace/token_iterator").TokenIterator;
    clearCurrentHighlight = function(editor, session, placeholderRange) {
      if (placeholderRange == null) {
        placeholderRange = null;
      }
      if (session.$bracketMatchHighlight || session.$bracketMismatchHighlight) {
        session.removeMarker(session.$bracketMatchHighlight);
        session.removeMarker(session.$bracketMismatchHighlight);
        session.$bracketMatchHighlight = null;
        session.$bracketMismatchHighlight = null;
        session.$highlightRange = placeholderRange;
        return toggleSurroundingBracketsPopup(editor);
      }
    };
    highlightBrackets = function(editor, pos) {
      var range, rangeLeft, rangeRight, session;
      session = editor.getSession();
      clearCurrentHighlight(editor, session);
      if (pos == null) {
        pos = findSurroundingBrackets(session, editor.getCursorPosition());
      }
      if (!pos.mismatch) {
        range = new Range(pos.left.row, pos.left.column, pos.right.row, pos.right.column + 1);
        session.$bracketMatchHighlight = session.addMarker(range, "ace_selection ace_bracket_match_range", "text");
      } else {
        if (pos.left && pos.right) {
          range = new Range(pos.left.row, pos.left.column, pos.right.row, pos.right.column + 1);
          session.$bracketMismatchHighlight = session.addMarker(range, "ace_error-marker", "text");
        }
        if (pos.left && !pos.right) {
          rangeLeft = new Range(pos.left.row, pos.left.column, Infinity, Infinity);
          session.$bracketMismatchHighlight = session.addMarker(rangeLeft, "ace_error-marker", "text");
        }
        if (pos.right && !pos.left) {
          rangeRight = new Range(0, 0, pos.right.row, pos.right.column + 1);
          session.$bracketMismatchHighlight = session.addMarker(rangeRight, "ace_error-marker", "text");
        }
      }
      session.$highlightRange = pos;
      toggleSurroundingBracketsPopup(editor, pos.left, pos.right);
    };
    newFakeToken = function(pos) {
      return {
        token: "",
        row: pos.row,
        column: pos.column,
        contains: function(pos) {
          return this.row === pos.row && this.column === pos.column;
        }
      };
    };
    newFilteringIterator = function(openingBracket, closingBracket, session, pos, isForward) {
      var current, fakeToken, result, token, tokenIterator, typeRe;
      tokenIterator = new TokenIterator(session, pos.row, pos.column);
      token = tokenIterator.getCurrentToken();
      if (token == null) {
        token = isForward ? tokenIterator.stepForward() : tokenIterator.stepBackward();
      }
      if (token == null) {
        return null;
      }
      typeRe = /(\.?.paren)+/;
      result = session.$newFilteringIterator(tokenIterator, function(filteringIterator) {
        token = tokenIterator.getCurrentToken();
        while (token && !typeRe.test(token.type)) {
          token = isForward ? tokenIterator.stepForward() : tokenIterator.stepBackward();
        }
        if (token != null) {
          filteringIterator.$updateCurrent();
          if (isForward) {
            tokenIterator.stepForward();
          } else {
            tokenIterator.stepBackward();
          }
          return true;
        } else {
          filteringIterator.$current = null;
          return false;
        }
      });
      if (isForward) {
        if (!result.next()) {
          return null;
        }
      } else {
        result.$updateCurrent();
        current = result.current();
        if (!typeRe.test(token.type)) {
          result.next();
        } else {
          if (current.token.value.length === 1 || current.column === pos.column) {
            if (current.contains(pos) && current.column < pos.column) {
              result.$current = newFakeToken(pos);
              return result;
            }
            result.next();
          } else {
            result.next();
            fakeToken = {
              token: {
                value: current.token.value.substring(0, pos.column - current.column),
                type: current.token.type
              },
              row: current.row,
              column: current.column,
              contains: function() {
                return false;
              }
            };
            result.$current = fakeToken;
            return result;
          }
        }
      }
      if (result.current() != null) {
        return result;
      } else {
        return null;
      }
    };
    findSurroundingBrackets = function(session, pos) {
      var allBrackets, expectedRightBracket, key, leftCandidate, leftNearest, result, rightBracket, rightCandidate, rightNearest;
      allBrackets = {
        left: [session.$findOpeningBracket('}', pos, newFilteringIterator('{', '}', session, pos, false)), session.$findOpeningBracket(']', pos, newFilteringIterator('[', ']', session, pos, false)), session.$findOpeningBracket(')', pos, newFilteringIterator('(', ')', session, pos, false))],
        right: [session.$findClosingBracket('{', pos, newFilteringIterator('{', '}', session, pos, true)), session.$findClosingBracket('[', pos, newFilteringIterator('[', ']', session, pos, true)), session.$findClosingBracket('(', pos, newFilteringIterator('(', ')', session, pos, true))]
      };
      leftNearest = null;
      rightNearest = null;
      key = 0;
      while (key < allBrackets.left.length) {
        leftCandidate = allBrackets.left[key];
        rightCandidate = allBrackets.right[key];
        if (!leftNearest) {
          leftNearest = leftCandidate;
        }
        if (!rightNearest) {
          rightNearest = rightCandidate;
        }
        if (leftCandidate) {
          if (leftNearest.row <= leftCandidate.row) {
            if (leftNearest.row === leftCandidate.row) {
              if (leftNearest.column < leftCandidate.column) {
                leftNearest = leftCandidate;
              }
            } else {
              leftNearest = leftCandidate;
            }
          }
        }
        if (rightCandidate) {
          if (rightNearest.row >= rightCandidate.row) {
            if (rightNearest.row === rightCandidate.row) {
              if (rightNearest.column > rightCandidate.column) {
                rightNearest = rightCandidate;
              }
            } else {
              rightNearest = rightCandidate;
            }
          }
        }
        key++;
      }
      result = {
        equalPos: function(pos1, pos2) {
          if ((pos1 != null) && (pos2 != null)) {
            return pos1.row === pos2.row && pos1.column === pos2.column;
          } else {
            return !((pos1 != null) || (pos2 != null));
          }
        },
        left: leftNearest,
        right: rightNearest,
        mismatch: true,
        equals: function(object) {
          if (object != null) {
            return this.mismatch === object.mismatch && this.equalPos(this.left, object.left) && this.equalPos(this.right, object.right);
          }
          return false;
        },
        isDefined: function() {
          return (this.left != null) || (this.right != null);
        }
      };
      if (result.left && result.right) {
        expectedRightBracket = session.$brackets[session.getLine(result.left.row).charAt(result.left.column)];
        rightBracket = session.getLine(result.right.row).charAt(result.right.column);
        if (expectedRightBracket === rightBracket) {
          result.mismatch = false;
        }
      }
      result.start = result.left;
      result.end = result.right;
      return result;
    };
    toggleSurroundingBracketsPopup = function(editor, left, right) {
      if (left != null) {
        left = {
          row: left.row + 1,
          column: left.column + 1
        };
      }
      if (right != null) {
        right = {
          row: right.row + 1,
          column: right.column + 1
        };
      }
      if ((left == null) && (right == null)) {
        return typeof ourOffscreenTextDisplay === "function" ? ourOffscreenTextDisplay(editor) : void 0;
      } else {
        return typeof ourOffscreenTextDisplay === "function" ? ourOffscreenTextDisplay(editor, left, right) : void 0;
      }
    };
    init = function(ace, editor, bindKey, offscreenTextDisplay) {
      var keyboardHandler, onEditorChange, session;
      ourOffscreenTextDisplay = offscreenTextDisplay;
      session = editor.getSession();
      keyboardHandler = {
        name: 'highlightBrackets',
        bindKey: bindKey,
        exec: function(editor) {
          session = editor.getSession();
          if (session.$highlightRange) {
            return clearCurrentHighlight(editor, session);
          } else {
            return highlightBrackets(editor);
          }
        },
        readOnly: true
      };
      editor.commands.addCommand(keyboardHandler);
      onEditorChange = function() {
        var candidateRange, currentRange;
        currentRange = session.$highlightRange;
        if (currentRange != null) {
          candidateRange = findSurroundingBrackets(session, editor.getCursorPosition());
          if (!currentRange.equals(candidateRange)) {
            if (candidateRange != null ? candidateRange.isDefined() : void 0) {
              highlightBrackets(editor, candidateRange);
            } else {
              clearCurrentHighlight(editor, session, candidateRange);
            }
          } else {
            toggleSurroundingBracketsPopup(editor, currentRange.left, currentRange.right);
          }
        }
      };
      session.getSelection().on("changeCursor", onEditorChange);
      editor.on("change", onEditorChange);
      editor.getSession().on("changeScrollTop", onEditorChange);
    };
    return {
      highlightBrackets: highlightBrackets,
      findSurroundingBrackets: findSurroundingBrackets,
      init: init
    };
  });

}).call(this);
