// Generated by CoffeeScript 1.10.0
(function() {
  define(function(require, exports, module) {
    var Range, findSurroundingBrackets, highlightBrackets, init, initPopover, popoverHandler;
    Range = require("../../range").Range;
    highlightBrackets = function(editor) {
      var content, pos, range, rangeLeft, rangeRight, session;
      pos = findSurroundingBrackets(editor);
      session = editor.getSession();
      if (session.$bracketHighlightRight || session.$bracketHighlightLeft) {
        session.removeMarker(session.$bracketHighlightLeft);
        session.removeMarker(session.$bracketHighlightRight);
        session.$bracketHighlightLeft = null;
        session.$bracketHighlightRight = null;
        return;
      }
      if (!pos.mismatch) {
        range = new Range(pos.left.row, pos.left.column, pos.right.row, pos.right.column + 1);
        session.$bracketHighlightLeft = session.addMarker(range, "ace_selection", "text");
      } else {
        if (pos.left && pos.right) {
          range = new Range(pos.left.row, pos.left.column, pos.right.row, pos.right.column + 1);
          session.$bracketHighlightLeft = session.addMarker(range, "ace_error-marker", "text");
        }
        if (pos.left && !pos.right) {
          rangeLeft = new Range(pos.left.row, pos.left.column, Infinity, Infinity);
          session.$bracketHighlightLeft = session.addMarker(rangeLeft, "ace_error-marker", "text");
        }
        if (pos.right && !pos.left) {
          rangeRight = new Range(0, 0, pos.right.row, pos.right.column + 1);
          session.$bracketHighlightRight = session.addMarker(rangeRight, "ace_error-marker", "text");
        }
      }
      session.$highlightRange = pos;
      if (pos.left && pos.right) {
        if ((pos.right.row - pos.left.row) > 70) {
          content = "line " + pos.left.row + ": " + session.getLine(pos.left.row) + "    line " + pos.right.row + ": " + session.getLine(pos.right.row);
          popoverHandler.show($("#line"), content);
        }
      }
    };
    findSurroundingBrackets = function(editor) {
      var allBrackets, expectedRightBracket, key, leftCandidate, leftNearest, positionLeftwards, positionRightwards, result, rightBracket, rightCandidate, rightNearest, session;
      session = editor.getSession();
      positionLeftwards = editor.getCursorPosition();
      if (session.getLine(positionLeftwards.row).length === positionLeftwards.column) {
        positionLeftwards.row += 1;
        positionLeftwards.column = 0;
      } else {
        positionLeftwards.column += 1;
      }
      positionRightwards = editor.getCursorPosition();
      allBrackets = {
        left: [session.$findOpeningBracket('}', positionLeftwards, /(\.?.paren)+/), session.$findOpeningBracket(']', positionLeftwards, /(\.?.paren)+/), session.$findOpeningBracket(')', positionLeftwards, /(\.?.paren)+/)],
        right: [session.$findClosingBracket('{', positionRightwards, /(\.?.paren)+/), session.$findClosingBracket('[', positionRightwards, /(\.?.paren)+/), session.$findClosingBracket('(', positionRightwards, /(\.?.paren)+/)]
      };
      leftNearest = null;
      rightNearest = null;
      key = 0;
      while (key < allBrackets.left.length) {
        leftCandidate = allBrackets.left[key];
        rightCandidate = allBrackets.right[key];
        if (!leftNearest) {
          leftNearest = leftCandidate;
        }
        if (!rightNearest) {
          rightNearest = rightCandidate;
        }
        if (leftCandidate) {
          if (leftNearest.row <= leftCandidate.row) {
            if (leftNearest.row === leftCandidate.row) {
              if (leftNearest.column < leftCandidate.column) {
                leftNearest = leftCandidate;
              }
            } else {
              leftNearest = leftCandidate;
            }
          }
        }
        if (rightCandidate) {
          if (rightNearest.row >= rightCandidate.row) {
            if (rightNearest.row === rightCandidate.row) {
              if (rightNearest.column > rightCandidate.column) {
                rightNearest = rightCandidate;
              }
            } else {
              rightNearest = rightCandidate;
            }
          }
        }
        key++;
      }
      result = {
        left: leftNearest,
        right: rightNearest,
        mismatch: true,
        equals: function(object) {
          if (object.left !== this.left) {
            return false;
          }
          if (object.right !== this.right) {
            return false;
          }
          if (object.mismatch !== this.mismatch) {
            return false;
          }
          return true;
        }
      };
      if (result.left && result.right) {
        expectedRightBracket = session.$brackets[session.getLine(result.left.row).charAt(result.left.column)];
        rightBracket = session.getLine(result.right.row).charAt(result.right.column);
        if (expectedRightBracket === rightBracket) {
          result.mismatch = false;
        }
      }
      return result;
    };
    popoverHandler = popoverHandler != null ? popoverHandler : {
      options: {
        html: true,
        placement: "bottom",
        trigger: "manual",
        container: "#editor"
      },
      show: function(jqPopoverContainer, content) {
        return setTimeout(function() {
          var cursorPosition;
          cursorPosition = $("textarea.ace_text-input").position();
          jqPopoverContainer.css({
            top: cursorPosition.top + 24 + "px",
            left: cursorPosition.left + "px"
          });
          popoverHandler.options.content = content;
          jqPopoverContainer.popover(popoverHandler.options);
          jqPopoverContainer.popover("show");
        }, 100);
      },
      hide: function(jqPopoverContainer) {
        return jqPopoverContainer.popover("destroy");
      }
    };
    initPopover = function(editor) {
      var cssPath, linkDemo, span;
      cssPath = require.toUrl("./highlighter.css");
      linkDemo = $("<link>").attr({
        rel: "stylesheet",
        href: cssPath
      });
      $("head").append(linkDemo);
      span = $("<span>").attr({
        id: "line"
      });
      $("body").append(span);
    };
    init = function(editor, bindKey) {
      var isInsideCurrentHighlight, keyboardHandler, session;
      initPopover(editor);
      session = editor.getSession();
      keyboardHandler = {
        name: 'highlightBrackets',
        bindKey: bindKey,
        exec: function(editor) {
          return highlightBrackets(editor);
        },
        readOnly: true
      };
      editor.commands.addCommand(keyboardHandler);
      session.getSelection().on("changeCursor", function() {
        if (session.$bracketHighlightLeft || session.$bracketHighlightRight) {
          session.removeMarker(session.$bracketHighlightLeft);
          session.removeMarker(session.$bracketHighlightRight);
          session.$bracketHighlightLeft = null;
          session.$bracketHighlightRight = null;
          if (!isInsideCurrentHighlight()) {
            highlightBrackets(editor);
          }
        }
        popoverHandler.hide($("#line"));
      });
      session.on("changeScrollTop", function() {
        return popoverHandler.hide($("#line"));
      });
      session.on("changeScrollLeft", function() {
        return popoverHandler.hide($("#line"));
      });
      isInsideCurrentHighlight = function() {
        var newRange, oldRange;
        oldRange = session.$highlightRange;
        newRange = findSurroundingBrackets(editor);
        return oldRange.equals(newRange);
      };
    };
    return exports.highlighter = {
      highlightBrackets: highlightBrackets,
      findSurroundingBrackets: findSurroundingBrackets,
      init: init
    };
  });

}).call(this);
