// Generated by CoffeeScript 1.12.6
(function() {
  var foo,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  foo = null;

  define(function(require, exports, module) {
    "use strict";
    var COMMENT_TOKENTYPE, ENVIRONMENT_TOKENTYPE, EQUATION_TOKENTYPE, ESCAPE_TOKENTYPE, FULL_LPAREN_TOKENTYPES, FULL_RPAREN_TOKENTYPES, GENERIC_PAREN_TOKENTYPE, LIST_ENUMERATE_REGEX, LIST_ENUMERATE_STATE, LIST_ITEMIZE_REGEX, LIST_ITEMIZE_STATE, LIST_TOKENTYPE, LPAREN_TOKENTYPE, MATH_ENVIRONMENT_DISPLAYED_NUMBERED_REGEX, MATH_ENVIRONMENT_DISPLAYED_NUMBERED_STATE, MATH_ENVIRONMENT_DISPLAYED_REGEX, MATH_ENVIRONMENT_DISPLAYED_STATE, MATH_LATEX_DISPLAYED_CLOSING_REGEX, MATH_LATEX_DISPLAYED_OPENING_REGEX, MATH_LATEX_DISPLAYED_STATE, MATH_LATEX_INLINE_CLOSING_REGEX, MATH_LATEX_INLINE_OPENING_REGEX, MATH_LATEX_INLINE_STATE, MATH_TEX_DISPLAYED_CLOSING_REGEX, MATH_TEX_DISPLAYED_OPENING_REGEX, MATH_TEX_DISPLAYED_STATE, MATH_TEX_INLINE_CLOSING_REGEX, MATH_TEX_INLINE_OPENING_REGEX, MATH_TEX_INLINE_STATE, PapeeriaLatexHighlightRules, RPAREN_TOKENTYPE, SPECIFIC_TOKEN_FOR_STATE, START_STATE, TextHighlightRules, oop;
    oop = require("ace/lib/oop");
    TextHighlightRules = require("ace/mode/text_highlight_rules").TextHighlightRules;
    exports.START_STATE = START_STATE = "start";
    exports.LIST_ITEMIZE_STATE = LIST_ITEMIZE_STATE = "list.itemize";
    LIST_ITEMIZE_REGEX = "itemize";
    exports.LIST_ENUMERATE_STATE = LIST_ENUMERATE_STATE = "list.enumerate";
    LIST_ENUMERATE_REGEX = "enumerate";
    exports.MATH_ENVIRONMENT_DISPLAYED_NUMBERED_STATE = MATH_ENVIRONMENT_DISPLAYED_NUMBERED_STATE = "math.environment.displayed.numbered";
    MATH_ENVIRONMENT_DISPLAYED_NUMBERED_REGEX = "equation";
    exports.MATH_ENVIRONMENT_DISPLAYED_STATE = MATH_ENVIRONMENT_DISPLAYED_STATE = "math.environment.displayed";
    MATH_ENVIRONMENT_DISPLAYED_REGEX = "equation\\*";
    exports.MATH_TEX_DISPLAYED_STATE = MATH_TEX_DISPLAYED_STATE = "math.tex.displayed";
    MATH_TEX_DISPLAYED_OPENING_REGEX = MATH_TEX_DISPLAYED_CLOSING_REGEX = "\\$\\$";
    exports.MATH_TEX_INLINE_STATE = MATH_TEX_INLINE_STATE = "math.tex.inline";
    MATH_TEX_INLINE_OPENING_REGEX = MATH_TEX_INLINE_CLOSING_REGEX = "\\$";
    exports.MATH_LATEX_DISPLAYED_STATE = MATH_LATEX_DISPLAYED_STATE = "math.latex.displayed";
    MATH_LATEX_DISPLAYED_OPENING_REGEX = "\\\\\\[";
    MATH_LATEX_DISPLAYED_CLOSING_REGEX = "\\\\\\]";
    exports.MATH_LATEX_INLINE_STATE = MATH_LATEX_INLINE_STATE = "math.latex.inline";
    MATH_LATEX_INLINE_OPENING_REGEX = "\\\\\\(";
    MATH_LATEX_INLINE_CLOSING_REGEX = "\\\\\\)";
    exports.COMMENT_TOKENTYPE = COMMENT_TOKENTYPE = "comment";
    exports.ESCAPE_TOKENTYPE = ESCAPE_TOKENTYPE = "escape";
    exports.LPAREN_TOKENTYPE = LPAREN_TOKENTYPE = "lparen";
    exports.RPAREN_TOKENTYPE = RPAREN_TOKENTYPE = "rparen";
    GENERIC_PAREN_TOKENTYPE = "paren";
    FULL_LPAREN_TOKENTYPES = GENERIC_PAREN_TOKENTYPE + "." + LPAREN_TOKENTYPE;
    FULL_RPAREN_TOKENTYPES = GENERIC_PAREN_TOKENTYPE + "." + RPAREN_TOKENTYPE;
    exports.LIST_TOKENTYPE = LIST_TOKENTYPE = "list";
    exports.EQUATION_TOKENTYPE = EQUATION_TOKENTYPE = "equation";
    exports.ENVIRONMENT_TOKENTYPE = ENVIRONMENT_TOKENTYPE = "environment";
    exports.TABLE_TOKENTYPE = "table";
    exports.FIGURE_TOKENTYPE = "figure";
    exports.SPECIFIC_TOKEN_FOR_STATE = SPECIFIC_TOKEN_FOR_STATE = {};
    SPECIFIC_TOKEN_FOR_STATE[LIST_ITEMIZE_STATE] = LIST_TOKENTYPE;
    SPECIFIC_TOKEN_FOR_STATE[LIST_ENUMERATE_STATE] = LIST_TOKENTYPE;
    SPECIFIC_TOKEN_FOR_STATE[MATH_ENVIRONMENT_DISPLAYED_NUMBERED_STATE] = EQUATION_TOKENTYPE;
    SPECIFIC_TOKEN_FOR_STATE[MATH_ENVIRONMENT_DISPLAYED_STATE] = EQUATION_TOKENTYPE;
    SPECIFIC_TOKEN_FOR_STATE[MATH_TEX_INLINE_STATE] = EQUATION_TOKENTYPE;
    SPECIFIC_TOKEN_FOR_STATE[MATH_TEX_DISPLAYED_STATE] = EQUATION_TOKENTYPE;
    SPECIFIC_TOKEN_FOR_STATE[MATH_LATEX_INLINE_STATE] = EQUATION_TOKENTYPE;
    SPECIFIC_TOKEN_FOR_STATE[MATH_LATEX_DISPLAYED_STATE] = EQUATION_TOKENTYPE;
    PapeeriaLatexHighlightRules = function() {

      /*
        * We maintain a stack of nested LaTeX semantic types (e.g. "document", "section", "list")
        * to be able to provide context for autocompletion and other functions.
        * Stack is constructed by the background highlighter;
        * its elements are then propagated to * the editor session and become
        * available through getContext method.
        *
        * The exact semantics of the rules for the use described in the file tokenizer.js
        * @param {pushedState} string
        * @return {function} function, which correctly puts new type(pushedState) on stack
       */
      var SimpleCommandState, basicRules, beginRule, citationsInstateRules, citationsRules, citeCommandState, endRule, equationStartRules, genericEnvironmentRule, listStartRules, mathEndRules, mathStartRule, popState, pushState, state;
      pushState = function(pushedState) {
        return function(currentState, stack) {
          stack.push(pushedState);
          return pushedState;
        };
      };
      popState = function(currentState, stack) {
        var errorMessage;
        if (stack == null) {
          throw new Error("papeeria_highlight_rules -- stack error: stack doesn't exist");
        }
        if (!Array.isArray(stack)) {
          if (stack !== "start") {
            throw new Error("papeeria_highlight_rules -- stack error: stack must be 'stack' of array");
          }
          return "start";
        }
        if (stack.length === 0) {
          if (currentState !== "start") {
            throw new Error('papeeria_highlight_rules -- stack error: stack should not be empty here');
          } else {
            return "start";
          }
        }
        errorMessage = "papeeria_highlight_rules -- stack error: expected " + currentState + " found " + stack[stack.length - 1];
        if (currentState !== stack[stack.length - 1]) {
          throw new Error(errorMessage);
        }
        stack.pop();
        if (stack.length === 0) {
          return "start";
        }
        return stack[stack.length - 1];
      };
      basicRules = function(tokenType) {
        var addToken;
        if ((tokenType != null)) {
          addToken = "." + tokenType;
        } else {
          addToken = "";
        }
        return [
          {
            token: "" + COMMENT_TOKENTYPE + addToken,
            regex: "%.*$"
          }, {
            token: "" + FULL_LPAREN_TOKENTYPES + addToken,
            regex: "[[({]"
          }, {
            token: "" + FULL_RPAREN_TOKENTYPES + addToken,
            regex: "[\\])}]"
          }, {
            token: "storage.type" + addToken,
            regex: "\\\\[a-zA-Z]+"
          }, {
            token: "constant.character." + ESCAPE_TOKENTYPE + addToken,
            regex: "\\\\[^a-zA-Z]?",
            merge: false
          }, {
            defaultToken: "text" + addToken
          }
        ];
      };
      beginRule = function(text, pushedState) {
        return {
          token: ["storage.type", FULL_LPAREN_TOKENTYPES, "variable.parameter", FULL_RPAREN_TOKENTYPES],
          regex: "(\\\\(?:begin))({)(" + text + ")(})",
          next: pushState(pushedState)
        };
      };
      endRule = function(text) {
        return {
          token: ["storage.type", FULL_LPAREN_TOKENTYPES, "variable.parameter", FULL_RPAREN_TOKENTYPES],
          regex: "(\\\\(?:end))({)(" + text + ")(})",
          next: popState
        };
      };
      mathStartRule = function(openingRegex, state) {
        return {
          token: "string." + FULL_LPAREN_TOKENTYPES,
          regex: openingRegex,
          next: pushState(state),
          merge: false
        };
      };
      mathEndRules = function(closingRegex) {
        return [
          {
            token: "string." + FULL_RPAREN_TOKENTYPES,
            regex: closingRegex,
            next: popState
          }, {
            token: "error." + EQUATION_TOKENTYPE,
            regex: "^\\s*$",
            next: popState
          }
        ];
      };
      equationStartRules = [beginRule(MATH_ENVIRONMENT_DISPLAYED_NUMBERED_REGEX, MATH_ENVIRONMENT_DISPLAYED_NUMBERED_STATE), beginRule(MATH_ENVIRONMENT_DISPLAYED_REGEX, MATH_ENVIRONMENT_DISPLAYED_STATE), mathStartRule(MATH_TEX_DISPLAYED_OPENING_REGEX, MATH_TEX_DISPLAYED_STATE), mathStartRule(MATH_TEX_INLINE_OPENING_REGEX, MATH_TEX_INLINE_STATE), mathStartRule(MATH_LATEX_DISPLAYED_OPENING_REGEX, MATH_LATEX_DISPLAYED_STATE), mathStartRule(MATH_LATEX_INLINE_OPENING_REGEX, MATH_LATEX_INLINE_STATE)];
      SimpleCommandState = (function() {
        function SimpleCommandState(commandName, stateName, instateTokenType) {
          this.commandName = commandName;
          this.stateName = stateName;
          this.instateTokenType = instateTokenType;
          this.generateRules = bind(this.generateRules, this);
          ({});
        }

        SimpleCommandState.prototype.generateRules = function(openingRules, instateRules) {
          var closing, opening;
          opening = {
            token: ["storage.type", FULL_LPAREN_TOKENTYPES + "." + this.stateName],
            next: pushState(this.stateName),
            regex: "(\\\\(?:" + this.commandName + "))({)"
          };
          openingRules.push(opening);
          closing = {
            token: FULL_RPAREN_TOKENTYPES,
            regex: "(})",
            next: popState
          };
          instateRules.push(closing);
          return basicRules(this.instateTokenType).forEach(function(rule) {
            return instateRules.push(rule);
          });
        };

        return SimpleCommandState;

      })();
      listStartRules = [beginRule(LIST_ITEMIZE_REGEX, LIST_ITEMIZE_STATE), beginRule(LIST_ENUMERATE_REGEX, LIST_ENUMERATE_STATE)];
      genericEnvironmentRule = {
        token: ["storage.type", FULL_LPAREN_TOKENTYPES + "." + ENVIRONMENT_TOKENTYPE, "variable.parameter." + ENVIRONMENT_TOKENTYPE, FULL_RPAREN_TOKENTYPES],
        regex: "(\\\\(?:begin|end))({)(\\w*)(})"
      };
      citationsRules = [];
      this.$rules = {};
      citeCommandState = new SimpleCommandState("cite", "cite", "variable.parameter.cite");
      citationsInstateRules = [];
      citeCommandState.generateRules(citationsRules, citationsInstateRules);
      citationsRules = citationsRules.concat([
        {
          token: ["storage.type", FULL_LPAREN_TOKENTYPES + ".ref", "variable.parameter.ref", FULL_RPAREN_TOKENTYPES],
          regex: "(\\\\(?:ref))({)(\\w*)(})"
        }, {
          token: ["keyword", FULL_LPAREN_TOKENTYPES, "variable.parameter", FULL_RPAREN_TOKENTYPES],
          regex: "(\\\\(?:v?ref|cite(?:[^{]*)))(?:({)([^}]*)(}))?"
        }
      ]);
      this.$rules[START_STATE] = [].concat(equationStartRules, listStartRules, citationsRules, [
        {
          token: ["keyword", FULL_LPAREN_TOKENTYPES, "variable.parameter", FULL_RPAREN_TOKENTYPES, FULL_LPAREN_TOKENTYPES, "storage.type", FULL_RPAREN_TOKENTYPES],
          regex: "(\\\\(?:documentclass|usepackage|input))(?:(\\[)([^\\]]*)(\\]))?({)([^}]*)(})"
        }, genericEnvironmentRule
      ]);
      this.$rules[LIST_ITEMIZE_STATE] = [].concat(equationStartRules, listStartRules, citationsRules, [endRule(LIST_ITEMIZE_REGEX), genericEnvironmentRule]);
      this.$rules[LIST_ENUMERATE_STATE] = [].concat(equationStartRules, listStartRules, citationsRules, [endRule(LIST_ENUMERATE_REGEX), genericEnvironmentRule]);
      this.$rules[MATH_ENVIRONMENT_DISPLAYED_NUMBERED_STATE] = [endRule(MATH_ENVIRONMENT_DISPLAYED_NUMBERED_REGEX)];
      this.$rules[MATH_ENVIRONMENT_DISPLAYED_STATE] = [endRule(MATH_ENVIRONMENT_DISPLAYED_REGEX)];
      this.$rules[MATH_TEX_INLINE_STATE] = mathEndRules(MATH_TEX_INLINE_CLOSING_REGEX);
      this.$rules[MATH_TEX_DISPLAYED_STATE] = mathEndRules(MATH_TEX_DISPLAYED_CLOSING_REGEX);
      this.$rules[MATH_LATEX_INLINE_STATE] = mathEndRules(MATH_LATEX_INLINE_CLOSING_REGEX);
      this.$rules[MATH_LATEX_DISPLAYED_STATE] = mathEndRules(MATH_LATEX_DISPLAYED_CLOSING_REGEX);
      for (state in this.$rules) {
        this.$rules[state] = this.$rules[state].concat(basicRules(SPECIFIC_TOKEN_FOR_STATE[state]));
      }
      this.$rules[citeCommandState.stateName] = citationsInstateRules;
    };
    oop.inherits(PapeeriaLatexHighlightRules, TextHighlightRules);
    exports.PapeeriaLatexHighlightRules = PapeeriaLatexHighlightRules;
  });

}).call(this);

//# sourceMappingURL=papeeria_latex_highlight_rules.js.map
