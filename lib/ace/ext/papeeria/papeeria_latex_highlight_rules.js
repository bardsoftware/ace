// Generated by CoffeeScript 1.10.0
(function() {
  var foo;

  foo = null;

  define(function(require, exports, module) {
    "use strict";
    var EQUATION_REGEX, EQUATION_STATE, EQUATION_TOKENTYPE, LIST_REGEX, LIST_STATE, LIST_TOKENTYPE, PapeeriaLatexHighlightRules, TextHighlightRules, oop;
    oop = require("../../lib/oop");
    TextHighlightRules = require("../../mode/text_highlight_rules").TextHighlightRules;
    LIST_REGEX = "itemize|enumerate";
    EQUATION_REGEX = "equation|equation\\*";
    LIST_STATE = "list";
    EQUATION_STATE = "equation";
    LIST_TOKENTYPE = 'list';
    EQUATION_TOKENTYPE = 'equation';
    exports.EQUATION_STATE = EQUATION_STATE;
    exports.LIST_STATE = LIST_STATE;
    exports.EQUATION_TOKENTYPE = EQUATION_TOKENTYPE;
    exports.LIST_TOKENTYPE = LIST_TOKENTYPE;
    PapeeriaLatexHighlightRules = function() {

      /**
      * We maintain a stack of nested LaTeX semantic types (e.g. "document", "section", "list"
      * to be able to provide context for autocompletion and other functions.
      * Stack is constructed by the background highlighter;
      * its elements are then propagated to * the editor session and become
      * available through getContext method.
      *
      * The exact semantics of the rules for the use described in the file tokenizer.js
      * @param {pushedState} string
      * @return {function} function, which correctly puts new type(pushedState) on stack
       */
      var basicRules, beginRule, endRule, key, latexMathModeConstructor, popState, pushState, rule;
      pushState = function(pushedState) {
        return function(currentState, stack) {
          stack.push(pushedState);
          return pushedState;
        };
      };
      popState = function(currentState, stack) {
        var errorMessage;
        if (stack == null) {
          throw new Error("papeeria_highlight_rules -- stack error: stack doesn't exist");
        }
        if (!Array.isArray(stack)) {
          return "start";
        }
        if (stack.length === 0) {
          if (currentState !== "start") {
            throw new Error('papeeria_highlight_rules -- stack error: stack should not be empty here');
          } else {
            return "start";
          }
        }
        errorMessage = "papeeria_highlight_rules -- stack error: expected " + stack[stack.length - 1] + " found " + currentState;
        if (currentState !== stack[stack.length - 1]) {
          throw new Error(errorMessage);
        }
        stack.pop();
        if (stack.length === 0) {
          return "start";
        }
        return stack[stack.length - 1];
      };
      basicRules = [
        {
          token: "comment",
          regex: "%.*$"
        }, {
          token: ["keyword", "lparen", "variable.parameter", "rparen", "lparen", "storage.type", "rparen"],
          regex: "(\\\\(?:documentclass|usepackage|input))(?:(\\[)([^\\]]*)(\\]))?({)([^}]*)(})"
        }, {
          token: ["storage.type", "lparen", "variable.parameter", "rparen"],
          regex: "(\\\\(?:begin|end))({)(\\w*)(})"
        }, {
          token: ["storage.type", "lparen.ref", "variable.parameter.ref", "rparen"],
          regex: "(\\\\(?:ref))({)(\\w*)(})"
        }, {
          token: ["keyword", "lparen", "variable.parameter", "rparen"],
          regex: "(\\\\(?:label|v?ref|cite(?:[^{]*)))(?:({)([^}]*)(}))?"
        }, {
          token: "string",
          regex: "\\\\\\[",
          next: pushState("math_latex")
        }, {
          token: "storage.type",
          regex: "\\\\[a-zA-Z]+"
        }, {
          token: "lparen",
          regex: "[[({]"
        }, {
          token: "rparen",
          regex: "[\\])}]"
        }, {
          token: "constant.character.escape",
          regex: "\\\\[^a-zA-Z]?"
        }, {
          token: "string",
          regex: "\\${1,2}",
          next: pushState("math")
        }
      ];
      beginRule = function(text, pushedState) {
        if (text == null) {
          text = "\\w*";
        }
        if (pushedState == null) {
          pushedState = "start";
        }
        return {
          token: ["storage.type", "lparen", "variable.parameter", "rparen"],
          regex: "(\\\\(?:begin))({)(" + text + ")(})",
          next: pushState(pushedState)
        };
      };
      endRule = function(text) {
        if (text == null) {
          text = "\\w*";
        }
        return {
          token: ["storage.type", "lparen", "variable.parameter", "rparen"],
          regex: "(\\\\(?:end))({)(" + text + ")(})",
          next: popState
        };
      };
      latexMathModeConstructor = function(regexOfEnd) {
        return [
          {
            token: "comment",
            regex: "%.*$"
          }, {
            token: "string",
            regex: regexOfEnd,
            next: popState
          }, {
            token: "storage.type." + EQUATION_TOKENTYPE,
            regex: "\\\\[a-zA-Z]+"
          }, {
            token: "constant.character.escape." + EQUATION_TOKENTYPE,
            regex: "\\\\[^a-zA-Z]?"
          }, {
            token: "error." + EQUATION_TOKENTYPE,
            regex: "^\\s*$",
            next: popState
          }, {
            defaultToken: "string." + EQUATION_TOKENTYPE
          }
        ];
      };
      this.$rules = {
        "start": [beginRule(LIST_REGEX, LIST_STATE), beginRule(EQUATION_REGEX, EQUATION_STATE), endRule(EQUATION_REGEX), endRule(LIST_REGEX)],
        "equation": [
          beginRule(EQUATION_REGEX, EQUATION_STATE), beginRule(LIST_REGEX, LIST_STATE), endRule(EQUATION_REGEX), endRule(LIST_REGEX), {
            token: "storage.type." + EQUATION_TOKENTYPE,
            regex: "\\\\[a-zA-Z]+"
          }, {
            token: "constant.character.escape." + EQUATION_TOKENTYPE,
            regex: "\\\\[^a-zA-Z]?"
          }, {
            defaultToken: "text." + EQUATION_TOKENTYPE
          }
        ],
        "list": [
          beginRule(LIST_REGEX, LIST_STATE), beginRule(EQUATION_REGEX, EQUATION_STATE), endRule(EQUATION_REGEX), endRule(LIST_REGEX), {
            token: "string",
            regex: "\\\\\\[",
            next: pushState("math_latex")
          }, {
            token: "storage.type." + LIST_TOKENTYPE,
            regex: "\\\\[a-zA-Z]+"
          }, {
            token: "constant.character.escape." + LIST_TOKENTYPE,
            regex: "\\\\[^a-zA-Z]?"
          }, {
            defaultToken: "text." + LIST_TOKENTYPE
          }
        ],
        "math": latexMathModeConstructor("\\${1,2}"),
        "math_latex": latexMathModeConstructor("\\\\\\]")
      };
      for (key in this.$rules) {
        for (rule in basicRules) {
          this.$rules[key].push(basicRules[rule]);
        }
      }
    };
    oop.inherits(PapeeriaLatexHighlightRules, TextHighlightRules);
    exports.PapeeriaLatexHighlightRules = PapeeriaLatexHighlightRules;
  });

}).call(this);
