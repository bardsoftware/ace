// Generated by CoffeeScript 1.10.0
(function() {
  var foo;

  foo = null;

  define(function(require, exports, module) {
    "use strict";
    var EQUATION_REGEX, EQUATION_STATE, EQUATION_TOKENTYPE, LIST_REGEX, LIST_STATE, LIST_TOKENTYPE, MATH_CLOSING_REGEX, MATH_LATEX_CLOSING_REGEX, MATH_LATEX_STATE, MATH_STATE, PapeeriaLatexHighlightRules, START_STATE, TextHighlightRules, oop;
    oop = require("ace/lib/oop");
    TextHighlightRules = require("ace/mode/text_highlight_rules").TextHighlightRules;
    START_STATE = "start";
    LIST_STATE = "list";
    LIST_REGEX = "itemize|enumerate";
    LIST_TOKENTYPE = "list";
    EQUATION_STATE = "equation";
    EQUATION_REGEX = "equation|equation\\*";
    EQUATION_TOKENTYPE = "equation";
    MATH_STATE = "math";
    MATH_CLOSING_REGEX = "\\${1,2}";
    MATH_LATEX_STATE = "math_latex";
    MATH_LATEX_CLOSING_REGEX = "\\\\\\]";
    exports.EQUATION_STATE = EQUATION_STATE;
    exports.LIST_STATE = LIST_STATE;
    exports.EQUATION_TOKENTYPE = EQUATION_TOKENTYPE;
    exports.LIST_TOKENTYPE = LIST_TOKENTYPE;
    PapeeriaLatexHighlightRules = function() {

      /**
      * We maintain a stack of nested LaTeX semantic types (e.g. "document", "section", "list")
      * to be able to provide context for autocompletion and other functions.
      * Stack is constructed by the background highlighter;
      * its elements are then propagated to * the editor session and become
      * available through getContext method.
      *
      * The exact semantics of the rules for the use described in the file tokenizer.js
      * @param {pushedState} string
      * @return {function} function, which correctly puts new type(pushedState) on stack
       */
      var basicRules, beginRule, endRule, popState, pushState, specificTokenForState, state;
      pushState = function(pushedState) {
        return function(currentState, stack) {
          stack.push(pushedState);
          return pushedState;
        };
      };
      popState = function(currentState, stack) {
        var errorMessage;
        if (stack == null) {
          throw new Error("papeeria_highlight_rules -- stack error: stack doesn't exist");
        }
        if (!Array.isArray(stack)) {
          if (stack !== "start") {
            throw new Error("papeeria_highlight_rules -- stack error: stack must be 'stack' of array");
          }
          return "start";
        }
        if (stack.length === 0) {
          if (currentState !== "start") {
            throw new Error('papeeria_highlight_rules -- stack error: stack should not be empty here');
          } else {
            return "start";
          }
        }
        errorMessage = "papeeria_highlight_rules -- stack error: expected " + currentState + " found " + stack[stack.length - 1];
        if (currentState !== stack[stack.length - 1]) {
          throw new Error(errorMessage);
        }
        stack.pop();
        if (stack.length === 0) {
          return "start";
        }
        return stack[stack.length - 1];
      };
      basicRules = function(tokenType) {
        var addToken;
        if ((tokenType != null)) {
          addToken = "." + tokenType;
        } else {
          addToken = "";
        }
        return [
          {
            token: "comment" + addToken,
            regex: "%.*$"
          }, {
            token: "lparen" + addToken,
            regex: "[[({]"
          }, {
            token: "rparen" + addToken,
            regex: "[\\])}]"
          }, {
            token: "storage.type" + addToken,
            regex: "\\\\[a-zA-Z]+"
          }, {
            token: "constant.character.escape" + addToken,
            regex: "\\\\[^a-zA-Z]?"
          }, {
            defaultToken: "text" + addToken
          }
        ];
      };
      beginRule = function(text, pushedState) {
        if (text == null) {
          text = "\\w*";
        }
        if (pushedState == null) {
          pushedState = "start";
        }
        return {
          token: ["storage.type", "lparen", "variable.parameter", "rparen"],
          regex: "(\\\\(?:begin))({)(" + text + ")(})",
          next: pushState(pushedState)
        };
      };
      endRule = function(text) {
        if (text == null) {
          text = "\\w*";
        }
        return {
          token: ["storage.type", "lparen", "variable.parameter", "rparen"],
          regex: "(\\\\(?:end))({)(" + text + ")(})",
          next: popState
        };
      };
      specificTokenForState = {};
      specificTokenForState[LIST_STATE] = LIST_TOKENTYPE;
      specificTokenForState[EQUATION_STATE] = EQUATION_TOKENTYPE;
      specificTokenForState[MATH_STATE] = EQUATION_TOKENTYPE;
      specificTokenForState[MATH_LATEX_STATE] = EQUATION_TOKENTYPE;
      this.$rules = {};
      this.$rules[START_STATE] = [
        {
          token: ["keyword", "lparen", "variable.parameter", "rparen", "lparen", "storage.type", "rparen"],
          regex: "(\\\\(?:documentclass|usepackage|input))(?:(\\[)([^\\]]*)(\\]))?({)([^}]*)(})"
        }, {
          token: ["storage.type", "lparen", "variable.parameter", "rparen"],
          regex: "(\\\\(?:begin|end))({)(\\w*)(})"
        }, {
          token: ["storage.type", "lparen.ref", "variable.parameter.ref", "rparen"],
          regex: "(\\\\(?:ref))({)(\\w*)(})"
        }, {
          token: ["storage.type", "lparen.cite", "variable.parameter.cite", "rparen"],
          regex: "(\\\\(?:cite))({)(\\w*)(})"
        }, {
          token: ["keyword", "lparen", "variable.parameter", "rparen"],
          regex: "(\\\\(?:v?ref|cite(?:[^{]*)))(?:({)([^}]*)(}))?"
        }, {
          token: "string",
          regex: "\\\\\\[",
          next: pushState(MATH_LATEX_STATE)
        }, {
          token: "string",
          regex: "\\${1,2}",
          next: pushState(MATH_STATE)
        }, beginRule(LIST_REGEX, LIST_STATE), beginRule(EQUATION_REGEX, EQUATION_STATE)
      ];
      this.$rules[EQUATION_STATE] = [endRule(EQUATION_REGEX)];
      this.$rules[LIST_STATE] = [beginRule(EQUATION_REGEX, EQUATION_STATE), endRule(LIST_REGEX)];
      this.$rules[MATH_STATE] = [
        {
          token: "string",
          regex: MATH_CLOSING_REGEX,
          next: popState
        }, {
          token: "error",
          regex: "^\\s*$",
          next: popState
        }
      ];
      this.$rules[MATH_LATEX_STATE] = [
        {
          token: "string",
          regex: MATH_LATEX_CLOSING_REGEX,
          next: popState
        }, {
          token: "error",
          regex: "^\\s*$",
          next: popState
        }
      ];
      for (state in this.$rules) {
        this.$rules[state] = this.$rules[state].concat(basicRules(specificTokenForState[state]));
      }
    };
    oop.inherits(PapeeriaLatexHighlightRules, TextHighlightRules);
    exports.PapeeriaLatexHighlightRules = PapeeriaLatexHighlightRules;
  });

}).call(this);
