// Generated by CoffeeScript 1.10.0
(function() {
  define(function(require, exports, module) {
    var GREEK_LETTERS, MATH_SNIPPETS, SUMS_AND_INTEGRALS, capitalizeGreekLetter, compare, i;
    SUMS_AND_INTEGRALS = ["\\sum", "\\int", "\\bigcup", "\\bigsqcup", "\\oint", "\\bigotimes", "\\bigcap", "\\bigvee", "\\oint", "\\bigwedge", "\\biguplus", "\\bigodot", "\\coprod", "\\prod"];
    compare = function(a, b) {
      return a.localeCompare(b);
    };
    SUMS_AND_INTEGRALS = SUMS_AND_INTEGRALS.sort(compare);
    SUMS_AND_INTEGRALS = (function() {
      var j, ref, results;
      results = [];
      for (i = j = 0, ref = SUMS_AND_INTEGRALS.length - 1; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
        results.push({
          caption: SUMS_AND_INTEGRALS[i] + "{n}{i=..}{..}",
          snippet: SUMS_AND_INTEGRALS[i] + "^{${1:n}}_{${2:i=1}}{${3}}",
          score: 1000 - i,
          meta: "Sums and integrals"
        });
      }
      return results;
    })();
    MATH_SNIPPETS = [
      {
        caption: "\\frac{num}{denom}",
        snippet: "\\frac{${1:num}}{${2:denom}}",
        score: 1000,
        meta: "Math"
      }, {
        caption: "\\sqrt{n}",
        snippet: "\\sqrt{${1:n}}",
        score: 1000,
        meta: "Math"
      }, {
        caption: "\\sqrt[k]{n}",
        snippet: "\\sqrt[${1:k}]{${2:n}}",
        score: 1000,
        meta: "Math"
      }, {
        caption: "\\binom{n}{k}",
        snippet: "\\binom{${1:n}}{${2:k}}",
        score: 1000,
        meta: "Math"
      }
    ];
    MATH_SNIPPETS = MATH_SNIPPETS.sort(function(a, b) {
      return a.meta.localeCompare(b.meta);
    });
    MATH_SNIPPETS = (function() {
      var j, ref, results;
      results = [];
      for (i = j = 0, ref = MATH_SNIPPETS.length - 1; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
        console.log(i);
        results.push({
          caption: MATH_SNIPPETS[i].caption,
          snippet: MATH_SNIPPETS[i].snippet,
          score: 1000 - i,
          meta: "Math"
        });
      }
      return results;
    })();
    GREEK_LETTERS = ["\\gamma", "\\delta", "\\theta", "\\lambda", "\\nu", "\\xi", "\\pi", "\\sigma", "\\upsilon", "\\phi", "\\chi", "\\psi", "\\omega"];
    capitalizeGreekLetter = function(word) {
      return "\\" + word[1].toUpperCase() + word.substring(2);
    };
    GREEK_LETTERS = GREEK_LETTERS.concat(GREEK_LETTERS.map(capitalizeGreekLetter));
    GREEK_LETTERS = GREEK_LETTERS.concat(["\\alpha", "\\beta", "\\chi", "\\nu", "\\eta", "\\zeta", "\\rho", "\\mu", "\\epsilon", "\\iota", "\\kappa", "\\tau", "\\varepsilon", "\\varsigma", "\\varphi", "\\varrho", "\\vartheta", "\\varkappa"]);
    GREEK_LETTERS = GREEK_LETTERS.sort(compare);
    GREEK_LETTERS = (function() {
      var j, ref, results;
      results = [];
      for (i = j = 0, ref = GREEK_LETTERS.length; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
        results.push({
          caption: GREEK_LETTERS[i],
          value: GREEK_LETTERS[i],
          score: 1000 - i,
          meta: "Greek Letter"
        });
      }
      return results;
    })();
    return SUMS_AND_INTEGRALS.concat(MATH_SNIPPETS, GREEK_LETTERS);
  });

}).call(this);
