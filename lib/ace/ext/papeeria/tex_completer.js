// Generated by CoffeeScript 1.10.0
(function() {
  define(function(require, exports, module) {
    var EQUATION_STATE, LIST_STATE, basicSnippets, env, equationEnvironments, equationKeywords, equationKeywords_, equationSnippets, formulasSnippets, listEnvironments, listKeywords, listKeywords_, listSnippets, papeeria_latex_highlight_rules;
    papeeria_latex_highlight_rules = require('./papeeria_latex_highlight_rules');
    EQUATION_STATE = papeeria_latex_highlight_rules.EQUATION_STATE;
    LIST_STATE = require('./papeeria_latex_highlight_rules').LIST_STATE;
    equationEnvironments = ['equation', 'equation*'];
    listEnvironments = ['itemize', 'enumerate'];
    basicSnippets = [
      {
        caption: "\\usepackage[]{...",
        snippet: "\\usepackage{${1  :package}}\n",
        meta: "base"
      }, {
        caption: "\\usepackage[]{...",
        snippet: "\\usepackage[${1:[options}]{${2:package}}\n",
        meta: "base"
      }, {
        caption: "\\newcommand{...",
        snippet: "\\newcommand{\\${1:cmd}}[${2:opt}]{${3:realcmd}}${4}\n",
        meta: "base"
      }
    ];
    listSnippets = (function() {
      var i, len, results;
      results = [];
      for (i = 0, len = listEnvironments.length; i < len; i++) {
        env = listEnvironments[i];
        results.push({
          caption: "\\begin{" + env + "}...",
          snippet: "\\begin{" + env + "}\n\t\\item $1\n\\end{" + env + "}",
          meta: "list"
        });
      }
      return results;
    })();
    equationSnippets = (function() {
      var i, len, results;
      results = [];
      for (i = 0, len = equationEnvironments.length; i < len; i++) {
        env = equationEnvironments[i];
        results.push({
          caption: "\\begin{" + env + "}...",
          snippet: "\\begin{" + env + "}\n\t$1\n\\end{" + env + "}",
          meta: "equation"
        });
      }
      return results;
    })();
    formulasSnippets = [
      {
        caption: "\\frac{num}{denom}",
        snippet: "\\frac{${1:num}}{${2:denom}}",
        meta: "equation"
      }, {
        caption: "\\sum{n}{i=..}{..}",
        snippet: "\\sum^{${1:n}}_{${2:i=1}}{${3}}",
        meta: "equation"
      }
    ];
    equationKeywords = ['\\alpha'];
    listKeywords = ['\\item'];
    listKeywords_ = listKeywords.map(function(word) {
      return {
        caption: word,
        value: word,
        meta: 'list'
      };
    });
    equationKeywords_ = equationKeywords.map(function(word) {
      return {
        caption: word,
        value: word,
        meta: 'equation'
      };
    });
    exports.getCompletions = function(editor, session, pos, prefix, callback) {
      var context;
      context = session.getContext(pos.row);
      if (context === "start") {
        callback(null, listSnippets.concat(equationSnippets.concat(basicSnippets)));
      }
      if (context === LIST_STATE) {
        callback(null, listKeywords_.concat(listSnippets.concat(equationSnippets)));
      }
      if (context === EQUATION_STATE) {
        return callback(null, formulasSnippets.concat(equationKeywords_));
      }
    };
  });

}).call(this);
