// Generated by CoffeeScript 1.10.0
(function() {
  define(function(require, exports, module) {
    var ContextHelper, EQUATION_STATE, LIST_STATE, PapeeriaLatexHighlightRules, ReferenceGetter, TexCompleter, basicSnippets, env, equationEnvironments, equationKeywords, equationKeywords_, equationSnippets, formulasSnippets, init, istype, listEnvironments, listKeywords, listKeywords_, listSnippets;
    PapeeriaLatexHighlightRules = require('./papeeria_latex_highlight_rules');
    ContextHelper = require('./context_helper');
    EQUATION_STATE = PapeeriaLatexHighlightRules.EQUATION_STATE;
    LIST_STATE = PapeeriaLatexHighlightRules.LIST_STATE;
    equationEnvironments = ['equation', 'equation*'];
    listEnvironments = ['itemize', 'enumerate'];
    basicSnippets = [
      {
        caption: "\\ref{...",
        snippet: "\\ref{${1}}",
        meta: "base"
      }, {
        caption: "\\usepackage[]{...",
        snippet: "\\usepackage{${1  :package}}\n",
        meta: "base"
      }, {
        caption: "\\usepackage[]{...",
        snippet: "\\usepackage[${1:[options}]{${2:package}}\n",
        meta: "base"
      }, {
        caption: "\\newcommand{...",
        snippet: "\\newcommand{\\${1:cmd}}[${2:opt}]{${3:realcmd}}${4}\n",
        meta: "base"
      }
    ];
    listSnippets = (function() {
      var i, len, results;
      results = [];
      for (i = 0, len = listEnvironments.length; i < len; i++) {
        env = listEnvironments[i];
        results.push({
          caption: "\\begin{" + env + "}...",
          snippet: "\\begin{" + env + "}\n\t\\item $1\n\\end{" + env + "}",
          meta: "list"
        });
      }
      return results;
    })();
    equationSnippets = (function() {
      var i, len, results;
      results = [];
      for (i = 0, len = equationEnvironments.length; i < len; i++) {
        env = equationEnvironments[i];
        results.push({
          caption: "\\begin{" + env + "}...",
          snippet: "\\begin{" + env + "}\n\t$1\n\\end{" + env + "}",
          meta: "equation"
        });
      }
      return results;
    })();
    formulasSnippets = [
      {
        caption: "\\frac{num}{denom}",
        snippet: "\\frac{${1:num}}{${2:denom}}",
        meta: "equation"
      }, {
        caption: "\\sum{n}{i=..}{..}",
        snippet: "\\sum^{${1:n}}_{${2:i=1}}{${3}}",
        meta: "equation"
      }
    ];
    equationKeywords = ['\\alpha'];
    listKeywords = ['\\item'];
    listKeywords_ = listKeywords.map(function(word) {
      return {
        caption: word,
        value: word,
        meta: 'list'
      };
    });
    equationKeywords_ = equationKeywords.map(function(word) {
      return {
        caption: word,
        value: word,
        meta: 'equation'
      };
    });
    istype = function(token, type) {
      return token.type.lastIndexOf(type) > -1;
    };
    init = function(editor, bindKey) {
      var HashHandler, keyboardHandler;
      HashHandler = require("ace/keyboard/hash_handler").HashHandler;
      keyboardHandler = new HashHandler();
      keyboardHandler.addCommand({
        name: 'add item in list mode',
        bindKey: bindKey,
        exec: function(editor) {
          var curLine, intendCount, pos;
          pos = editor.getCursorPosition();
          curLine = editor.session.getLine(pos.row);
          intendCount = ContextHelper.getNestingOfList(editor.session, pos.row);
          if (ContextHelper.getContext(editor.session, pos.row) === LIST_STATE && curLine.indexOf("begin") < pos.column) {
            editor.insert("\n" + "    ".repeat(intendCount) + "\\item ");
            return true;
          } else {
            return false;
          }
        }
      });
      return editor.keyBinding.addKeyboardHandler(keyboardHandler);
    };
    ReferenceGetter = (function() {
      function ReferenceGetter() {
        this.cachedURL = "";
        this.cache = [];
      }

      ReferenceGetter.prototype.getReference = function(url, callback) {
        var json, thisRef;
        if (url === this.cashedURL) {
          return this.cashe;
        } else {
          this.cachedURL = url;
          json = $.getJSON(url);
          thisRef = this;
          json.success(function(data) {
            return callback(data, thisRef);
          });
          return this.cache;
        }
      };

      return ReferenceGetter;

    })();
    return exports.CompletionTools = {
      TexCompleter: TexCompleter = (function() {
        function TexCompleter() {
          this.r = new ReferenceGetter();
        }

        TexCompleter.prototype.getCompletions = function(editor, session, pos, prefix, callback) {
          var context, token;
          context = ContextHelper.getContext(session, pos.row);
          token = session.getTokenAt(pos.row, pos.column);
          console.log(token);
          if (istype(token, "ref")) {
            return callback(null, this.r.getReference("example.json", function(data, r) {
              return r.cache = data.map(function(elem) {
                return {
                  name: elem.caption,
                  value: elem.caption,
                  score: Number.MAX_VALUE,
                  meta: "ref"
                };
              });
            }));
          } else if (context === "start") {
            return callback(null, listSnippets.concat(equationSnippets.concat(basicSnippets)));
          } else if (context === LIST_STATE) {
            return callback(null, listKeywords_.concat(listSnippets.concat(equationSnippets)));
          } else if (context === EQUATION_STATE) {
            return callback(null, formulasSnippets.concat(equationKeywords_));
          }
        };

        return TexCompleter;

      })(),
      init: init
    };
  });

}).call(this);
