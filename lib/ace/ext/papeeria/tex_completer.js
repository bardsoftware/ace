// Generated by CoffeeScript 1.10.0
(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  define(["./papeeria_latex_highlight_rules", './latex_parsing_context'], function(PapeeriaLatexHighlightRules, LatexParsingContext) {
    var EQUATION_STATE, LIST_STATE, ReferenceGetter, TexCompleter, basicSnippets, env, equationEnvironments, equationKeywords, equationSnippets, formulasSnippets, init, isType, listEnvironments, listKeywords, listSnippets;
    EQUATION_STATE = PapeeriaLatexHighlightRules.EQUATION_STATE;
    LIST_STATE = PapeeriaLatexHighlightRules.LIST_STATE;
    equationEnvironments = ['equation', 'equation*'];
    listEnvironments = ['itemize', 'enumerate'];
    basicSnippets = [
      {
        caption: "\\ref{...",
        snippet: "\\ref{${1}}",
        meta: "base"
      }, {
        caption: "\\usepackage[]{...",
        snippet: "\\usepackage{${1  :package}}\n",
        meta: "base"
      }, {
        caption: "\\usepackage[]{...",
        snippet: "\\usepackage[${1:[options}]{${2:package}}\n",
        meta: "base"
      }, {
        caption: "\\newcommand{...",
        snippet: "\\newcommand{\\${1:cmd}}[${2:opt}]{${3:realcmd}}${4}\n",
        meta: "base"
      }
    ];
    listSnippets = (function() {
      var i, len, results;
      results = [];
      for (i = 0, len = listEnvironments.length; i < len; i++) {
        env = listEnvironments[i];
        results.push({
          caption: "\\begin{" + env + "}...",
          snippet: "\\begin{" + env + "}\n\t\\item $1\n\\end{" + env + "}",
          meta: "list"
        });
      }
      return results;
    })();
    equationSnippets = (function() {
      var i, len, results;
      results = [];
      for (i = 0, len = equationEnvironments.length; i < len; i++) {
        env = equationEnvironments[i];
        results.push({
          caption: "\\begin{" + env + "}...",
          snippet: "\\begin{" + env + "}\n\t$1\n\\end{" + env + "}",
          meta: "equation"
        });
      }
      return results;
    })();
    formulasSnippets = [
      {
        caption: "\\frac{num}{denom}",
        snippet: "\\frac{${1:num}}{${2:denom}}",
        meta: "equation"
      }, {
        caption: "\\sum{n}{i=..}{..}",
        snippet: "\\sum^{${1:n}}_{${2:i=1}}{${3}}",
        meta: "equation"
      }
    ];
    equationKeywords = ['\\alpha'];
    listKeywords = ['\\item'];
    listKeywords = listKeywords.map(function(word) {
      return {
        caption: word,
        value: word,
        meta: 'list'
      };
    });
    equationKeywords = equationKeywords.map(function(word) {
      return {
        caption: word,
        value: word,
        meta: 'equation'
      };
    });
    isType = function(token, type) {
      return token.type.lastIndexOf(type) > -1;
    };
    init = function(editor, bindKey) {
      var HashHandler, keyboardHandler;
      HashHandler = require("ace/keyboard/hash_handler").HashHandler;
      keyboardHandler = new HashHandler();
      keyboardHandler.addCommand({
        name: 'add item in list mode',
        bindKey: bindKey,
        exec: function(editor) {
          var curLine, indentCount, pos, tabString;
          pos = editor.getCursorPosition();
          curLine = editor.session.getLine(pos.row);
          indentCount = LatexParsingContext.getNestedListDepth(editor.session, pos.row);
          tabString = editor.getSession().getTabString();
          if (LatexParsingContext.getContext(editor.session, pos.row) === LIST_STATE && curLine.indexOf("begin") < pos.column) {
            editor.insert("\n" + tabString.repeat(indentCount) + "\\item ");
            return true;
          } else {
            return false;
          }
        }
      });
      return editor.keyBinding.addKeyboardHandler(keyboardHandler);
    };
    ReferenceGetter = (function() {
      function ReferenceGetter() {
        this.getReferences = bind(this.getReferences, this);
        this.processData = bind(this.processData, this);
        this.lastFetchedUrl = "";
        this.cache = [];
      }

      ReferenceGetter.prototype.processData = function(data) {
        return this.cache = data.map((function(_this) {
          return function(elem) {
            return {
              name: elem.caption,
              value: elem.caption,
              meta: elem.type + "-ref"
            };
          };
        })(this));
      };

      ReferenceGetter.prototype.getReferences = function(url, callback) {
        if (url !== this.lastFetchedUrl) {
          return $.getJSON(url).done((function(_this) {
            return function(data) {
              _this.processData(data);
              callback(null, _this.cache);
              return _this.lastFetchedUrl = url;
            };
          })(this));
        }
      };

      return ReferenceGetter;

    })();
    TexCompleter = (function() {
      function TexCompleter() {
        this.getCompletions = bind(this.getCompletions, this);
        this.refGetter = new ReferenceGetter();
      }

      TexCompleter.init = function(editor) {
        return init(editor, {
          win: 'enter',
          mac: 'enter'
        });
      };


      /*
       * callback -- this function is adding list of completions to our popup. Provide by ACE completions API
       * @param {object} error -- convention in node, the first argument to a callback
       * is usually used to indicate an error
       * @param {array} response -- list of completions for adding to popup
       */

      TexCompleter.prototype.getCompletions = function(editor, session, pos, prefix, callback) {
        var context, token;
        context = LatexParsingContext.getContext(session, pos.row);
        token = session.getTokenAt(pos.row, pos.column);
        if (isType(token, "ref")) {
          return this.refGetter.getReferences("example.json", callback);
        } else if (context === "start") {
          return callback(null, listSnippets.concat(equationSnippets.concat(basicSnippets)));
        } else if (context === LIST_STATE) {
          return callback(null, listKeywords.concat(listSnippets.concat(equationSnippets)));
        } else if (context === EQUATION_STATE) {
          return callback(null, formulasSnippets.concat(equationKeywords));
        }
      };

      return TexCompleter;

    })();
    return TexCompleter;
  });

}).call(this);
