// Generated by CoffeeScript 1.10.0
(function() {
  define(function(require, exports, module) {
    exports.setupPreviewer = function(editor, popoverHandler) {
      var curEnd, curStart, currentDelayedUpdateId, delayedUpdatePopover, getCurrentFormula, getEquationRange, getPopoverPosition, getTopmostRowNumber, getWholeEquation, handleCurrentContext, initKaTeX, initPopover, jqEditorContainer, jqFormula, katex, prevContext, ref, updatePopover, updatePosition;
      katex = null;
      popoverHandler = popoverHandler != null ? popoverHandler : {
        options: {
          html: true,
          placement: "bottom",
          trigger: "manual",
          title: "Formula",
          container: editor.container
        },
        show: function(jqPopoverContainer, content, position) {
          jqPopoverContainer.css(position);
          popoverHandler.options.content = content;
          jqPopoverContainer.popover(popoverHandler.options);
          jqPopoverContainer.popover("show");
        },
        destroy: function(jqPopoverContainer) {
          return jqPopoverContainer.popover("destroy");
        },
        isVisible: function(jqPopoverContainer) {
          return jqPopoverContainer.data().popover.tip().hasClass("in");
        },
        popoverExists: function(jqPopoverContainer) {
          return (jqPopoverContainer.data() != null) && (jqPopoverContainer.data().popover != null);
        },
        setContent: function(jqPopoverContainer, content) {
          var jqPopoverElement;
          jqPopoverElement = jqPopoverContainer.data().popover.tip().children(".popover-content");
          return jqPopoverElement.html(content);
        },
        setPosition: function(jqPopoverContainer, position) {
          var jqPopoverElement;
          jqPopoverElement = jqPopoverContainer.data().popover.tip();
          return jqPopoverElement.css(position);
        }
      };
      initKaTeX = function(onLoaded) {
        var cssDemoPath, linkDemo, span;
        cssDemoPath = require.toUrl("./katex-demo.css");
        linkDemo = $("<link>").attr({
          rel: "stylesheet",
          href: cssDemoPath
        });
        $("head").append(linkDemo);
        span = $("<span>").attr({
          id: "formula"
        });
        $("body").append(span);
        require(["ace/ext/katex"], function(katexInner) {
          katex = katexInner;
          onLoaded();
        });
      };
      jqEditorContainer = $(editor.container);
      jqFormula = function() {
        return $("#formula");
      };
      ref = [null, null], curStart = ref[0], curEnd = ref[1];
      prevContext = editor.session.getContext(editor.getCursorPosition().row);
      currentDelayedUpdateId = null;
      getEquationRange = function(cursorRow) {
        var end, i, removeRegex, start, wholeEquation;
        i = cursorRow;
        removeRegex = /\\begin{equation}|\\label{.*}|\\begin{equation*}/g;
        while (editor.session.getContext(i - 1) === "equation") {
          i -= 1;
        }
        start = i;
        while (editor.session.getContext(i + 1) === "equation") {
          i += 1;
        }
        end = i;
        wholeEquation = editor.session.getLines(start, end).join(" ").replace(removeRegex, "");
        return [start, end];
      };
      getWholeEquation = function(start, end) {
        var removeRegex, wholeEquation;
        removeRegex = /\\end\{equation\}|\\begin\{equation\}|\\label\{[^\}]*\}/g;
        wholeEquation = editor.session.getLines(start, end).join(" ").replace(removeRegex, "");
        return wholeEquation;
      };
      getTopmostRowNumber = function() {
        return parseInt(jqEditorContainer.find("div.ace_gutter > div.ace_layer.ace_gutter-layer.ace_folding-enabled > div:nth-child(1)").text());
      };
      getPopoverPosition = function(row) {
        var jqSecondRow, left, pxRowHeight, relativeRow, secondRowPosition, secondRowSelector, top;
        secondRowSelector = "div.ace_scroller > div > div.ace_layer.ace_text-layer > div:nth-child(2)";
        jqSecondRow = jqEditorContainer.find(secondRowSelector);
        secondRowPosition = jqSecondRow.position();
        pxRowHeight = jqSecondRow.height();
        relativeRow = row + 1 - getTopmostRowNumber();
        top = (secondRowPosition.top + pxRowHeight * (relativeRow + 1)) + "px";
        left = jqEditorContainer.position().left;
        return {
          top: top,
          left: left
        };
      };
      getCurrentFormula = function() {
        return katex.renderToString(getWholeEquation(curStart, curEnd), {
          displayMode: true
        });
      };
      initPopover = function() {
        var content, cursorRow, e, error, popoverPosition, ref1;
        cursorRow = editor.getCursorPosition().row;
        ref1 = getEquationRange(cursorRow), curStart = ref1[0], curEnd = ref1[1];
        popoverPosition = getPopoverPosition(curEnd);
        try {
          return content = getCurrentFormula();
        } catch (error) {
          e = error;
          return content = e;
        } finally {
          popoverHandler.show(jqFormula(), content, popoverPosition);
        }
      };
      updatePopover = function() {
        var content, e, error;
        try {
          return content = getCurrentFormula();
        } catch (error) {
          e = error;
          return content = e;
        } finally {
          popoverHandler.setContent(jqFormula(), content);
        }
      };
      delayedUpdatePopover = function() {
        if (currentDelayedUpdateId != null) {
          clearTimeout(currentDelayedUpdateId);
        }
        return currentDelayedUpdateId = setTimeout((function() {
          updatePopover();
          return currentDelayedUpdateId = null;
        }), 1000);
      };
      updatePosition = function() {
        return popoverHandler.setPosition(jqFormula(), getPopoverPosition(curEnd));
      };
      handleCurrentContext = function() {
        var currentContext;
        currentContext = editor.session.getContext(editor.getCursorPosition().row);
        if (prevContext !== "equation" && currentContext === "equation") {
          if (katex == null) {
            initKaTeX(initPopover);
          } else {
            initPopover();
          }
          editor.on("change", delayedUpdatePopover);
          editor.session.on("changeScrollTop", updatePosition);
        } else if (prevContext === "equation" && currentContext !== "equation") {
          editor.off("change", delayedUpdatePopover);
          editor.session.off("changeScrollTop", updatePosition);
          popoverHandler.destroy(jqFormula());
        }
        return prevContext = currentContext;
      };
      return editor.on("changeSelection", handleCurrentContext);
    };
  });

}).call(this);
