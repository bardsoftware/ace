// Generated by CoffeeScript 1.12.6
(function() {
  var foo,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  foo = null;

  define(function(require, exports, module) {
    var COMMENT_TOKENTYPE, ConstrainedTokenIterator, ContextHandler, EQUATION_CONTEXT, ERROR_TOKENTYPE, EquationRangeHandler, LABEL_TOKENTYPE, PARAMETER_TOKENTYPE, Range, SelectionHandler, equalTokens, getContext, initKaTeX, isType, katex, myContextHandler, myKatexLoader, ref, ref1, reset, setupPreviewer, sh;
    ref = require("ace/ext/papeeria/latex_parsing_context"), EQUATION_CONTEXT = ref.EQUATION_CONTEXT, getContext = ref.getContext;
    ref1 = require("ace/ext/papeeria/papeeria_latex_highlight_rules"), COMMENT_TOKENTYPE = ref1.COMMENT_TOKENTYPE, ERROR_TOKENTYPE = ref1.ERROR_TOKENTYPE, LABEL_TOKENTYPE = ref1.LABEL_TOKENTYPE, PARAMETER_TOKENTYPE = ref1.PARAMETER_TOKENTYPE, isType = ref1.isType;
    Range = require("ace/range").Range;
    ConstrainedTokenIterator = require("ace/ext/papeeria/constrained_token_iterator").ConstrainedTokenIterator;
    myKatexLoader = null;
    katex = null;
    initKaTeX = function(onLoaded) {
      if (myKatexLoader == null) {
        myKatexLoader = function(consumer) {
          return require(["ace/ext/katex"], function(katexInner) {
            return consumer(katexInner);
          });
        };
      }
      return myKatexLoader(function(katexInner) {
        katex = katexInner;
        return onLoaded();
      });
    };
    equalTokens = function(token1, token2) {
      return token1.type === token2.type && token1.value.trim() === token2.value.trim();
    };
    ContextHandler = (function() {
      ContextHandler.UPDATE_DELAY = 1000;

      ContextHandler.KATEX_OPTIONS = {
        displayMode: true,
        throwOnError: false
      };


      /**
       * Extracts equation from a given range. Ignores labels and comments.
       *
       * @param {EditSession} session a session to work with
       * @param {Range} range a range of equation
       * @returns {Object} an object with two fields: `labels` -- array of labels
       * collected in the range; `equation` -- equation string with labels and
       * comments filtered out
       */

      ContextHandler.extractEquation = function(session, range) {
        var constrainedTokenIterator, end, labels, start, token, tokenValues;
        start = range.start, end = range.end;
        constrainedTokenIterator = new ConstrainedTokenIterator(session, range, start.row, start.column);
        tokenValues = [];
        labels = [];
        while (true) {
          token = constrainedTokenIterator.stepForward();
          if (constrainedTokenIterator.outOfRange) {
            break;
          }
          if (isType(token, COMMENT_TOKENTYPE)) {
            continue;
          }
          if (isType(token, LABEL_TOKENTYPE)) {
            if (isType(token, PARAMETER_TOKENTYPE)) {
              labels.push(token.value);
            }
            continue;
          }
          tokenValues.push(token.value);
        }
        return {
          labels: labels,
          equation: tokenValues.join("")
        };
      };

      function ContextHandler(editor1, popoverHandler1, equationRangeHandler1, I18N1) {
        this.editor = editor1;
        this.popoverHandler = popoverHandler1;
        this.equationRangeHandler = equationRangeHandler1;
        this.I18N = I18N1;
        this.handleCurrentContext = bind(this.handleCurrentContext, this);
        this.delayedUpdatePopover = bind(this.delayedUpdatePopover, this);
        this.updateCallback = bind(this.updateCallback, this);
        this.updatePosition = bind(this.updatePosition, this);
        this.initPopover = bind(this.initPopover, this);
        this.jqEditorContainer = $(this.editor.container);
        this.contextPreviewExists = false;
        this.rangeCorrect = false;
        this.currentRange = null;
      }

      ContextHandler.prototype.getPopoverPosition = function(row) {
        return {
          top: (this.editor.renderer.textToScreenCoordinates(row + 2, 1).pageY) + "px",
          left: (this.jqEditorContainer.position().left) + "px"
        };
      };

      ContextHandler.prototype.getCurrentFormula = function() {
        var e, equation, labels, ref2, title;
        try {
          if (this.currentRange == null) {
            throw "Inconsistent state";
          }
          if (!this.rangeCorrect) {
            throw "<div style=\"text-align:center\"><p>" + (this.messages.join("\n")) + "</p></div>";
          }
          ref2 = ContextHandler.extractEquation(this.editor.getSession(), this.currentRange), labels = ref2.labels, equation = ref2.equation;
          title = labels.length === 0 ? "Formula" : labels.join(", ");
          return {
            title: title,
            content: katex.renderToString(equation, ContextHandler.KATEX_OPTIONS)
          };
        } catch (error) {
          e = error;
          return {
            title: "Error!",
            content: e
          };
        }
      };

      ContextHandler.prototype.initPopover = function() {
        var popoverPosition, ref2, rendered, title;
        popoverPosition = this.getPopoverPosition(this.getEquationEndRow());
        ref2 = this.getCurrentFormula(), title = ref2.title, rendered = ref2.content;
        return this.popoverHandler.show(title, rendered, popoverPosition);
      };

      ContextHandler.prototype.getEquationEndRow = function() {
        var i;
        i = this.editor.getCursorPosition().row;
        while (getContext(this.editor.getSession(), i) === EQUATION_CONTEXT) {
          i += 1;
        }
        return i;
      };

      ContextHandler.prototype.updatePosition = function() {
        return this.popoverHandler.setPosition(this.getPopoverPosition(this.getEquationEndRow()));
      };

      ContextHandler.prototype.updateRange = function() {
        var cursorPos, reason, reasons, ref2;
        cursorPos = this.editor.getCursorPosition();
        ref2 = this.equationRangeHandler.getEquationRange(cursorPos.row, cursorPos.column), this.rangeCorrect = ref2.correct, reasons = ref2.reasons, this.currentRange = ref2.range;
        return this.messages = (function() {
          var j, len, results;
          results = [];
          for (j = 0, len = reasons.length; j < len; j++) {
            reason = reasons[j];
            results.push(this.I18N.text(reason));
          }
          return results;
        }).call(this);
      };

      ContextHandler.prototype.destroyRange = function() {
        this.currentRange = null;
        return this.rangeCorrect = false;
      };

      ContextHandler.prototype.updatePopover = function() {
        var ref2, rendered, title;
        if (this.contextPreviewExists) {
          ref2 = this.getCurrentFormula(), title = ref2.title, rendered = ref2.content;
          return this.popoverHandler.setContent(title, rendered);
        }
      };

      ContextHandler.prototype.updateCallback = function() {
        var curContext, curTime, cursorPos;
        if (this.lastChangeTime != null) {
          curTime = Date.now();
          if (curTime - this.lastChangeTime > ContextHandler.UPDATE_DELAY) {
            return;
          }
          this.currentDelayedUpdateId = setTimeout(this.updateCallback, ContextHandler.UPDATE_DELAY - (curTime - this.lastChangeTime));
          return this.lastChangeTime = null;
        } else {
          this.currentDelayedUpdateId = null;
          cursorPos = this.editor.getCursorPosition();
          curContext = getContext(this.editor.getSession(), cursorPos.row, cursorPos.column);
          if (curContext === EQUATION_CONTEXT) {
            this.updateRange();
          } else {
            this.destroyRange();
            this.disableUpdates();
          }
          if (this.currentRange != null) {
            if (this.contextPreviewExists) {
              return this.updatePopover();
            } else {
              return this.createContextPreview();
            }
          } else {
            return this.destroyContextPreview();
          }
        }
      };

      ContextHandler.prototype.delayedUpdatePopover = function() {
        var curDocLength;
        curDocLength = this.editor.getSession().getLength();
        if (this.contextPreviewExists && curDocLength !== this.prevDocLength) {
          setTimeout(this.updatePosition, 0);
          this.prevDocLength = curDocLength;
        }
        if (this.currentDelayedUpdateId != null) {
          this.lastChangeTime = Date.now();
          return;
        }
        return this.currentDelayedUpdateId = setTimeout(this.updateCallback, ContextHandler.UPDATE_DELAY);
      };

      ContextHandler.prototype.createContextPreview = function() {
        this.contextPreviewExists = true;
        if (katex == null) {
          return initKaTeX(this.initPopover);
        } else {
          return this.initPopover();
        }
      };

      ContextHandler.prototype.enableUpdates = function() {
        this.prevDocLength = this.editor.getSession().getLength();
        this.editor.on("change", this.delayedUpdatePopover);
        return this.editor.getSession().on("changeScrollTop", this.updatePosition);
      };

      ContextHandler.prototype.disableUpdates = function() {
        this.currentDelayedUpdateId = null;
        this.editor.off("change", this.delayedUpdatePopover);
        return this.editor.getSession().off("changeScrollTop", this.updatePosition);
      };

      ContextHandler.prototype.destroyContextPreview = function() {
        this.contextPreviewExists = false;
        return this.popoverHandler.destroy();
      };

      ContextHandler.prototype.destroyEverything = function() {
        this.destroyRange();
        this.disableUpdates();
        return this.destroyContextPreview();
      };

      ContextHandler.prototype.handleCurrentContext = function() {
        return setTimeout(((function(_this) {
          return function() {
            var currentContext, cursorPos;
            if (_this.currentDelayedUpdateId != null) {
              return;
            }
            cursorPos = _this.editor.getCursorPosition();
            currentContext = getContext(_this.editor.getSession(), cursorPos.row, cursorPos.column);
            if ((_this.currentRange != null) && !_this.currentRange.contains(cursorPos.row, cursorPos.column)) {
              _this.destroyRange();
              _this.disableUpdates();
            }
            if ((_this.currentRange == null) && _this.contextPreviewExists) {
              _this.destroyContextPreview();
            }
            if ((_this.currentRange == null) && currentContext === EQUATION_CONTEXT) {
              _this.updateRange();
              _this.enableUpdates();
            }
            if ((_this.currentRange != null) && !_this.contextPreviewExists) {
              return _this.createContextPreview();
            }
          };
        })(this)), 0);
      };

      return ContextHandler;

    })();
    EquationRangeHandler = (function() {
      EquationRangeHandler.DOCUMENT_END_ERROR_CODE = "js.math_preview.error.document_end";

      EquationRangeHandler.EMPTY_LINE_ERROR_CODE = "js.math_preview.error.empty_line";

      EquationRangeHandler.WHITESPACE_LINE_ERROR_CODE = "js.math_preview.error.whitespace_line";

      function EquationRangeHandler(editor1) {
        this.editor = editor1;
      }

      EquationRangeHandler.prototype.getBoundary = function(session, row, column, start) {
        var correct, curColumn, curIndex, curRow, nextColumn, nextIndex, nextRow, reason, ref2, startRow, summand, token;
        summand = start ? -1 : 1;
        startRow = row;
        curIndex = session.doc.positionToIndex({
          row: row,
          column: column
        }, startRow);
        curRow = row;
        curColumn = column;
        while (true) {
          nextIndex = curIndex + summand;
          if (nextIndex < 0) {
            startRow -= 1;
            curIndex = session.doc.positionToIndex({
              row: curRow,
              column: curColumn
            }, startRow);
            nextIndex = curIndex + summand;
          }
          ref2 = session.doc.indexToPosition(nextIndex, startRow), nextRow = ref2.row, nextColumn = ref2.column;
          if (nextColumn === curColumn && nextRow === curRow) {
            return {
              correct: false,
              reason: EquationRangeHandler.DOCUMENT_END_ERROR_CODE,
              row: curRow,
              column: curColumn
            };
          }
          if (getContext(session, nextRow, nextColumn) !== EQUATION_CONTEXT) {
            token = session.getTokenAt(curRow, curColumn);
            if (token == null) {
              correct = false;
              reason = EquationRangeHandler.EMPTY_LINE_ERROR_CODE;
            } else if (isType(token, ERROR_TOKENTYPE)) {
              correct = false;
              reason = EquationRangeHandler.WHITESPACE_LINE_ERROR_CODE;
            } else {
              correct = true;
              reason = null;
            }
            return {
              correct: correct,
              reason: reason,
              row: curRow,
              column: curColumn
            };
          }
          curIndex = nextIndex;
          curRow = nextRow;
          curColumn = nextColumn;
        }
      };

      EquationRangeHandler.prototype.getEquationRange = function(row, column) {
        var end, reasons, start;
        start = this.getBoundary(this.editor.getSession(), row, column, true);
        end = this.getBoundary(this.editor.getSession(), row, column, false);
        reasons = [];
        if (!start.correct) {
          reasons.push(start.reason);
        }
        if (!end.correct && !((reasons[0] != null) && reasons[0] === end.reason)) {
          reasons.push(end.reason);
        }
        return {
          correct: start.correct && end.correct,
          reasons: reasons,
          range: new Range(start.row, start.column, end.row, end.column)
        };
      };

      return EquationRangeHandler;

    })();
    myContextHandler = null;
    reset = function() {
      if (myContextHandler != null ? myContextHandler.contextPreviewExists : void 0) {
        return myContextHandler.destroyEverything();
      }
    };
    sh = SelectionHandler = {
      hideSelectionPopover: function() {
        popoverHandler.destroy();
        editor.off("changeSelection", sh.hideSelectionPopover);
        editor.getSession().off("changeScrollTop", sh.hideSelectionPopover);
        return editor.getSession().off("changeScrollLeft", sh.hideSelectionPopover);
      },
      renderSelectionUnderCursor: function() {
        var content, cursorPos, cursorPosition, popoverPosition;
        cursorPos = editor.getCursorPosition();
        cursorPosition = editor.renderer.textToScreenCoordinates(cursorPos.row, cursorPos.column);
        popoverPosition = {
          top: (cursorPosition.pageY + 24) + "px",
          left: cursorPosition.pageX + "px"
        };
        content = katex.renderToString(editor.getSelectedText(), KATEX_OPTIONS);
        popoverHandler.show("Preview", content, popoverPosition);
        editor.on("changeSelection", sh.hideSelectionPopover);
        editor.getSession().on("changeScrollTop", sh.hideSelectionPopover);
        return editor.getSession().on("changeScrollLeft", sh.hideSelectionPopover);
      },
      createPopover: function(editor) {
        if (!(myContextHandler != null ? myContextHandler.contextPreviewExists : void 0)) {
          if (katex == null) {
            initKaTeX(sh.renderSelectionUnderCursor);
            return;
          }
          return sh.renderSelectionUnderCursor();
        }
      }
    };
    setupPreviewer = function(editor, popoverHandler, katexLoader, I18N) {
      var equationRangeHandler;
      myKatexLoader = katexLoader;
      equationRangeHandler = new EquationRangeHandler(editor);
      myContextHandler = new ContextHandler(editor, popoverHandler, equationRangeHandler, I18N);
      return editor.on("changeSelection", myContextHandler.handleCurrentContext);
    };
    exports.testExport = {
      ContextHandler: ContextHandler,
      EquationRangeHandler: EquationRangeHandler
    };
    exports.reset = reset;
    exports.SelectionHandler = SelectionHandler;
    exports.setupPreviewer = setupPreviewer;
  });

}).call(this);

//# sourceMappingURL=katex-previewer.js.map
