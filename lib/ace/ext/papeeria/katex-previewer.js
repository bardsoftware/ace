// Generated by CoffeeScript 1.10.0
(function() {
  define(function(require, exports, module) {
    var LatexParsingContext, Range, TokenIterator, getEquationRangeHandler;
    LatexParsingContext = require("ace/ext/papeeria/latex_parsing_context");
    TokenIterator = require("ace/token_iterator").TokenIterator;
    Range = require("ace/range").Range;
    getEquationRangeHandler = function(editor) {
      var erh;
      erh = {
        BEGIN_EQUATION_TOKEN_SEQUENCE: [
          {
            type: "storage.type",
            value: "\\begin"
          }, {
            type: "lparen",
            value: "{"
          }, {
            type: "variable.parameter",
            value: "equation"
          }, {
            type: "rparen",
            value: "}"
          }
        ],
        END_EQUATION_TOKEN_SEQUENCE: [
          {
            type: "storage.type",
            value: "\\end"
          }, {
            type: "lparen",
            value: "{"
          }, {
            type: "variable.parameter",
            value: "equation"
          }, {
            type: "rparen",
            value: "}"
          }
        ],
        equalTokens: function(token1, token2) {
          if ((token1 != null) && (token2 != null)) {
            return token1.type === token2.type && token1.value === token2.value;
          } else {
            if ((token1 != null) || (token2 != null)) {
              return false;
            } else {
              return true;
            }
          }
        },
        getEquationStart: function(tokenIterator) {
          var curEquationStart, curSequenceIndex, curTokenPosition, j, len, ref, token;
          ref = erh.BEGIN_EQUATION_TOKEN_SEQUENCE;
          for (j = 0, len = ref.length; j < len; j++) {
            token = ref[j];
            if (erh.equalTokens(token, tokenIterator.getCurrentToken())) {
              tokenIterator.stepForward();
            }
          }
          curSequenceIndex = erh.BEGIN_EQUATION_TOKEN_SEQUENCE.length - 1;
          curEquationStart = null;
          while (curSequenceIndex >= 0) {
            if (erh.equalTokens(erh.BEGIN_EQUATION_TOKEN_SEQUENCE[curSequenceIndex], tokenIterator.stepBackward())) {
              if (curSequenceIndex === erh.BEGIN_EQUATION_TOKEN_SEQUENCE.length - 1) {
                curTokenPosition = tokenIterator.getCurrentTokenPosition();
                curEquationStart = {
                  row: curTokenPosition.row,
                  column: curTokenPosition.column + tokenIterator.getCurrentToken().value.length
                };
              }
              curSequenceIndex -= 1;
            } else {
              curSequenceIndex = erh.BEGIN_EQUATION_TOKEN_SEQUENCE.length - 1;
              curEquationStart = null;
            }
          }
          return curEquationStart;
        },
        getEquationEnd: function(tokenIterator) {
          var curEquationStart, curSequenceIndex, j, len, ref, token;
          ref = erh.END_EQUATION_TOKEN_SEQUENCE.slice(0).reverse();
          for (j = 0, len = ref.length; j < len; j++) {
            token = ref[j];
            if (erh.equalTokens(token, tokenIterator.getCurrentToken())) {
              tokenIterator.stepBackward();
            }
          }
          curSequenceIndex = 0;
          curEquationStart = null;
          while (curSequenceIndex < erh.END_EQUATION_TOKEN_SEQUENCE.length) {
            if (erh.equalTokens(erh.END_EQUATION_TOKEN_SEQUENCE[curSequenceIndex], tokenIterator.stepForward())) {
              if (curSequenceIndex === 0) {
                curEquationStart = tokenIterator.getCurrentTokenPosition();
              }
              curSequenceIndex += 1;
            } else {
              curSequenceIndex = 0;
              curEquationStart = null;
            }
          }
          return curEquationStart;
        },
        getEquationRange: function(row, column) {
          var end, start, tokenIterator;
          tokenIterator = new TokenIterator(editor.getSession(), row, column);
          end = erh.getEquationEnd(tokenIterator);
          start = erh.getEquationStart(tokenIterator);
          return new Range(start.row, start.column, end.row, end.column);
        }
      };
      return erh;
    };
    exports.getEquationRangeHandler = getEquationRangeHandler;
    exports.setupPreviewer = function(editor, popoverHandler) {
      var ContextHandler, EquationRangeHandler, KATEX_OPTIONS, SelectionHandler, ch, erh, getFormulaElement, initKaTeX, jqEditorContainer, katex, sh;
      katex = null;
      if (popoverHandler == null) {
        popoverHandler = {
          options: {
            html: true,
            placement: "bottom",
            trigger: "manual",
            container: editor.container
          },
          show: function(jqPopoverContainer, title, content, position) {
            jqPopoverContainer.css(position);
            popoverHandler.options.content = content;
            popoverHandler.options.title = title;
            jqPopoverContainer.popover(popoverHandler.options);
            jqPopoverContainer.popover("show");
          },
          destroy: function(jqPopoverContainer) {
            return jqPopoverContainer.popover("destroy");
          },
          popoverExists: function(jqPopoverContainer) {
            var ref;
            return ((ref = jqPopoverContainer.data()) != null ? ref.popover : void 0) != null;
          },
          setContent: function(jqPopoverContainer, title, content) {
            var popoverElement;
            popoverElement = jqPopoverContainer.data().popover.tip();
            popoverElement.children(".popover-content").html(content);
            return popoverElement.children(".popover-title").text(title);
          },
          setPosition: function(jqPopoverContainer, position) {
            return jqPopoverContainer.data().popover.tip().css(position);
          }
        };
      }
      initKaTeX = function(onLoaded) {
        var cssDemoPath, linkDemo, span;
        cssDemoPath = require.toUrl("./katex-demo.css");
        linkDemo = $("<link>").attr({
          rel: "stylesheet",
          href: cssDemoPath
        });
        $("head").append(linkDemo);
        span = $("<span>").attr({
          id: "formula"
        });
        $("body").append(span);
        require(["ace/ext/katex"], function(katexInner) {
          katex = katexInner;
          onLoaded();
        });
      };
      jqEditorContainer = $(editor.container);
      getFormulaElement = function() {
        return $("#formula");
      };
      KATEX_OPTIONS = {
        displayMode: true,
        throwOnError: false
      };
      erh = EquationRangeHandler = getEquationRangeHandler(editor);
      ch = ContextHandler = {
        contextPreviewExists: false,
        UPDATE_DELAY: 1000,
        LABEL_SEQUENCE: [
          {
            type: "keyword",
            value: /^\\label$/
          }, {
            type: "lparen",
            value: /^\{$/
          }, {
            type: "variable.parameter",
            value: /.*/
          }, {
            type: "rparen",
            value: /^\}$/
          }
        ],
        LABEL_PARAMETER_INDEX: 2,
        getWholeEquation: function(range) {
          var curColumn, curLabelParameter, curLabelTokens, curRow, j, labelParameters, labelSequenceIndex, labelToken, len, ref, ref1, token, tokenIterator, tokenToMatch, tokenValues;
          tokenValues = [];
          labelSequenceIndex = 0;
          labelParameters = [];
          curLabelParameter = null;
          curLabelTokens = [];
          tokenIterator = new TokenIterator(editor.getSession(), range.start.row, range.start.column);
          tokenIterator.stepForward();
          ref = tokenIterator.getCurrentTokenPosition(), curRow = ref.row, curColumn = ref.column;
          token = tokenIterator.getCurrentToken();
          while (range.contains(curRow, curColumn + token.value.length)) {
            tokenToMatch = ch.LABEL_SEQUENCE[labelSequenceIndex];
            if (token.type === tokenToMatch.type && tokenToMatch.value.test(token.value)) {
              if (labelSequenceIndex === ch.LABEL_PARAMETER_INDEX) {
                curLabelParameter = token.value;
              }
              curLabelTokens.push(token);
              labelSequenceIndex += 1;
              if (labelSequenceIndex === ch.LABEL_SEQUENCE.length) {
                labelParameters.push(curLabelParameter);
                labelSequenceIndex = 0;
                curLabelTokens = [];
              }
            } else {
              labelSequenceIndex = 0;
              for (j = 0, len = curLabelTokens.length; j < len; j++) {
                labelToken = curLabelTokens[j];
                tokenValues.push(labelToken.value);
              }
              curLabelTokens = [];
              tokenValues.push(token.value);
            }
            tokenIterator.stepForward();
            ref1 = tokenIterator.getCurrentTokenPosition(), curRow = ref1.row, curColumn = ref1.column;
            token = tokenIterator.getCurrentToken();
          }
          return [labelParameters, tokenValues.join("")];
        },
        getPopoverPosition: function(row) {
          return {
            top: (editor.renderer.textToScreenCoordinates(row + 2, 1).pageY) + "px",
            left: (jqEditorContainer.position().left) + "px"
          };
        },
        getCurrentFormula: function() {
          var e, equationString, error, labelParameters, ref, title;
          try {
            ref = ch.getWholeEquation(ch.curRange), labelParameters = ref[0], equationString = ref[1];
            title = labelParameters.length === 0 ? "Formula" : labelParameters.join(", ");
            return [title, katex.renderToString(equationString, KATEX_OPTIONS)];
          } catch (error) {
            e = error;
            return ["Error!", e];
          }
        },
        initPopover: function() {
          return setTimeout((function() {
            var popoverPosition, ref, rendered, title;
            popoverPosition = ch.getPopoverPosition(ch.getEquationEnd());
            ref = ch.getCurrentFormula(), title = ref[0], rendered = ref[1];
            return popoverHandler.show(getFormulaElement(), title, rendered, popoverPosition);
          }), 0);
        },
        getEquationEnd: function() {
          var i;
          i = editor.getCursorPosition().row;
          while (LatexParsingContext.getContext(editor.getSession(), i) === "equation") {
            i += 1;
          }
          return i;
        },
        updatePosition: function() {
          return popoverHandler.setPosition(getFormulaElement(), ch.getPopoverPosition(ch.getEquationEnd()));
        },
        updateRange: function() {
          var cursorColumn, cursorRow, ref;
          ref = editor.getCursorPosition(), cursorRow = ref.row, cursorColumn = ref.column;
          return ch.curRange = erh.getEquationRange(cursorRow, cursorColumn);
        },
        updatePopover: function() {
          var ref, rendered, title;
          if (ch.contextPreviewExists) {
            ref = ch.getCurrentFormula(), title = ref[0], rendered = ref[1];
            return popoverHandler.setContent(getFormulaElement(), title, rendered);
          }
        },
        updateCallback: function() {
          var curContext, curTime;
          if (ch.lastChangeTime != null) {
            curTime = Date.now();
            ch.currentDelayedUpdateId = setTimeout(ch.updateCallback, ch.UPDATE_DELAY - (Date.now() - ch.lastChangeTime));
            return ch.lastChangeTime = null;
          } else {
            ch.currentDelayedUpdateId = null;
            if (ch.contextPreviewExists) {
              curContext = LatexParsingContext.getContext(editor.getSession(), editor.getCursorPosition().row);
              if (curContext !== "equation") {
                return ch.destroyContextPreview();
              } else {
                ch.updateRange();
                return ch.updatePopover();
              }
            }
          }
        },
        delayedUpdatePopover: function() {
          var curDocLength;
          curDocLength = editor.getSession().getLength();
          if (curDocLength !== ch.prevDocLength) {
            setTimeout(ch.updatePosition, 0);
            ch.prevDocLength = curDocLength;
          }
          if (ch.currentDelayedUpdateId != null) {
            ch.lastChangeTime = Date.now();
            return;
          }
          return ch.currentDelayedUpdateId = setTimeout(ch.updateCallback, ch.UPDATE_DELAY);
        },
        createContextPreview: function() {
          ch.updateRange();
          ch.contextPreviewExists = true;
          if (katex == null) {
            initKaTeX(ch.initPopover);
          } else {
            ch.initPopover();
          }
          ch.prevDocLength = editor.getSession().getLength();
          editor.on("change", ch.delayedUpdatePopover);
          return editor.getSession().on("changeScrollTop", ch.updatePosition);
        },
        destroyContextPreview: function() {
          ch.curRange = null;
          ch.contextPreviewExists = false;
          editor.off("change", ch.delayedUpdatePopover);
          editor.getSession().off("changeScrollTop", ch.updatePosition);
          return popoverHandler.destroy(getFormulaElement());
        },
        handleCurrentContext: function() {
          return setTimeout((function() {
            var currentContext, cursorColumn, cursorRow, ref;
            if (ch.currentDelayedUpdateId != null) {
              return;
            }
            ref = editor.getCursorPosition(), cursorRow = ref.row, cursorColumn = ref.column;
            currentContext = LatexParsingContext.getContext(editor.getSession(), cursorRow);
            if (ch.contextPreviewExists && currentContext !== "equation") {
              return ch.destroyContextPreview();
            } else if (!ch.contextPreviewExists && currentContext === "equation") {
              return ch.createContextPreview();
            }
          }), 0);
        }
      };
      sh = SelectionHandler = {
        hideSelectionPopover: function() {
          popoverHandler.destroy(getFormulaElement());
          editor.off("changeSelection", sh.hideSelectionPopover);
          editor.getSession().off("changeScrollTop", sh.hideSelectionPopover);
          editor.getSession().off("changeScrollLeft", sh.hideSelectionPopover);
        },
        renderSelectionUnderCursor: function() {
          var content, cursorColumn, cursorPosition, cursorRow, popoverPosition, ref;
          ref = editor.getCursorPosition(), cursorRow = ref.row, cursorColumn = ref.column;
          cursorPosition = editor.renderer.textToScreenCoordinates(cursorRow, cursorColumn);
          popoverPosition = {
            top: (cursorPosition.pageY + 24) + "px",
            left: cursorPosition.pageX + "px"
          };
          content = katex.renderToString(editor.getSelectedText(), KATEX_OPTIONS);
          popoverHandler.show(getFormulaElement(), "Preview", content, popoverPosition);
          editor.on("changeSelection", sh.hideSelectionPopover);
          editor.getSession().on("changeScrollTop", sh.hideSelectionPopover);
          editor.getSession().on("changeScrollLeft", sh.hideSelectionPopover);
        },
        createPopover: function(editor) {
          if (!ch.contextPreviewExists) {
            if (katex == null) {
              initKaTeX(sh.renderSelectionUnderCursor);
              return;
            }
            return sh.renderSelectionUnderCursor();
          }
        }
      };
      editor.commands.addCommand({
        name: "previewLaTeXFormula",
        bindKey: {
          win: "Alt-p",
          mac: "Alt-p"
        },
        exec: SelectionHandler.createPopover
      });
      editor.on("changeSelection", ContextHandler.handleCurrentContext);
    };
  });

}).call(this);
