// Generated by CoffeeScript 1.10.0
(function() {
  define(function(require, exports, module) {
    var LatexContextParser;
    LatexContextParser = require("ace/ext/papeeria/latex_parsing_context");
    exports.setupPreviewer = function(editor, popoverHandler) {
      var ContextHandler, KATEX_OPTIONS, SelectionHandler, ch, getFormulaElement, initKaTeX, jqEditorContainer, katex, sh;
      katex = null;
      popoverHandler = popoverHandler != null ? popoverHandler : {
        options: {
          html: true,
          placement: "bottom",
          trigger: "manual",
          title: "Formula",
          container: editor.container
        },
        show: function(jqPopoverContainer, content, position) {
          jqPopoverContainer.css(position);
          popoverHandler.options.content = content;
          jqPopoverContainer.popover(popoverHandler.options);
          jqPopoverContainer.popover("show");
        },
        destroy: function(jqPopoverContainer) {
          return jqPopoverContainer.popover("destroy");
        },
        popoverExists: function(jqPopoverContainer) {
          var ref;
          return ((ref = jqPopoverContainer.data()) != null ? ref.popover : void 0) != null;
        },
        setContent: function(jqPopoverContainer, content) {
          var jqPopoverElement;
          return jqPopoverElement = jqPopoverContainer.data().popover.tip().children(".popover-content").html(content);
        },
        setPosition: function(jqPopoverContainer, position) {
          var jqPopoverElement;
          return jqPopoverElement = jqPopoverContainer.data().popover.tip().css(position);
        }
      };
      initKaTeX = function(onLoaded) {
        var cssDemoPath, linkDemo, span;
        cssDemoPath = require.toUrl("./katex-demo.css");
        linkDemo = $("<link>").attr({
          rel: "stylesheet",
          href: cssDemoPath
        });
        $("head").append(linkDemo);
        span = $("<span>").attr({
          id: "formula"
        });
        $("body").append(span);
        require(["ace/ext/katex"], function(katexInner) {
          katex = katexInner;
          onLoaded();
        });
      };
      jqEditorContainer = $(editor.container);
      getFormulaElement = function() {
        return $("#formula");
      };
      KATEX_OPTIONS = {
        displayMode: true,
        throwOnError: false
      };
      ch = ContextHandler = {
        contextPreviewExists: false,
        UPDATE_DELAY: 1000,
        REMOVE_REGEX: /\\end\{equation\}|\\begin\{equation\}/g,
        getEquationRange: function(cursorRow) {
          var end, i, start;
          i = cursorRow;
          while (LatexContextParser.getContext(editor.getSession(), i - 1) === "equation") {
            i -= 1;
          }
          start = i;
          i = cursorRow;
          while (LatexContextParser.getContext(editor.getSession(), i + 1) === "equation") {
            i += 1;
          }
          end = i;
          return [start, end];
        },
        getWholeEquation: function(start, end) {
          return editor.session.getLines(start, end).join(" ").replace(ch.REMOVE_REGEX, "");
        },
        getPopoverPosition: function(row) {
          return {
            top: (editor.renderer.textToScreenCoordinates(row + 2, 1).pageY) + "px",
            left: (jqEditorContainer.position().left) + "px"
          };
        },
        getCurrentFormula: function() {
          return katex.renderToString(ch.getWholeEquation(ch.curStart, ch.curEnd), KATEX_OPTIONS);
        },
        initPopover: function() {
          var cursorRow, popoverPosition, ref;
          cursorRow = editor.getCursorPosition().row;
          ref = ch.getEquationRange(cursorRow), ch.curStart = ref[0], ch.curEnd = ref[1];
          popoverPosition = ch.getPopoverPosition(ch.curEnd);
          return popoverHandler.show(getFormulaElement(), ch.getCurrentFormula(), popoverPosition);
        },
        updatePopover: function() {
          return popoverHandler.setContent(getFormulaElement(), ch.getCurrentFormula());
        },
        updateCallback: function() {
          var curTime;
          if (ch.lastChangeTime != null) {
            curTime = Date.now();
            ch.currentDelayedUpdateId = setTimeout(ch.updateCallback, ch.UPDATE_DELAY - (Date.now() - ch.lastChangeTime));
            return ch.lastChangeTime = null;
          } else {
            ch.updatePopover();
            return ch.currentDelayedUpdateId = null;
          }
        },
        delayedUpdatePopover: function() {
          if (ch.currentDelayedUpdateId != null) {
            ch.lastChangeTime = Date.now();
            return;
          }
          return ch.currentDelayedUpdateId = setTimeout(ch.updateCallback, ch.UPDATE_DELAY);
        },
        updatePosition: function() {
          return popoverHandler.setPosition(getFormulaElement(), ch.getPopoverPosition(ch.curEnd));
        },
        handleCurrentContext: function() {
          var currentContext;
          currentContext = LatexContextParser.getContext(editor.getSession(), editor.getCursorPosition().row);
          if (!ch.contextPreviewExists && currentContext === "equation") {
            ch.contextPreviewExists = true;
            if (katex == null) {
              initKaTeX(ch.initPopover);
            } else {
              ch.initPopover();
            }
            editor.on("change", ch.delayedUpdatePopover);
            return editor.getSession().on("changeScrollTop", ch.updatePosition);
          } else if (ch.contextPreviewExists && currentContext !== "equation") {
            ch.contextPreviewExists = false;
            editor.off("change", ch.delayedUpdatePopover);
            editor.getSession().off("changeScrollTop", ch.updatePosition);
            return popoverHandler.destroy(getFormulaElement());
          }
        }
      };
      sh = SelectionHandler = {
        hideSelectionPopover: function() {
          popoverHandler.destroy(getFormulaElement());
          editor.off("changeSelection", sh.hideSelectionPopover);
          editor.getSession().off("changeScrollTop", sh.hideSelectionPopover);
          editor.getSession().off("changeScrollLeft", sh.hideSelectionPopover);
        },
        renderSelectionUnderCursor: function() {
          var content, cursorColumn, cursorPosition, cursorRow, popoverPosition, ref;
          ref = editor.getCursorPosition(), cursorRow = ref.row, cursorColumn = ref.column;
          cursorPosition = editor.renderer.textToScreenCoordinates(cursorRow, cursorColumn);
          popoverPosition = {
            top: (cursorPosition.pageY + 24) + "px",
            left: cursorPosition.pageX + "px"
          };
          content = katex.renderToString(editor.getSelectedText(), KATEX_OPTIONS);
          popoverHandler.show(getFormulaElement(), content, popoverPosition);
          editor.on("changeSelection", sh.hideSelectionPopover);
          editor.getSession().on("changeScrollTop", sh.hideSelectionPopover);
          editor.getSession().on("changeScrollLeft", sh.hideSelectionPopover);
        },
        createPopover: function(editor) {
          if (!ch.contextPreviewExists) {
            if (katex == null) {
              initKaTeX(sh.renderSelectionUnderCursor);
              return;
            }
            return sh.renderSelectionUnderCursor();
          }
        }
      };
      editor.commands.addCommand({
        name: "previewLaTeXFormula",
        bindKey: {
          win: "Alt-p",
          mac: "Alt-p"
        },
        exec: SelectionHandler.createPopover
      });
      editor.on("changeSelection", ContextHandler.handleCurrentContext);
    };
  });

}).call(this);
