// Generated by CoffeeScript 1.10.0
(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  define(function(require, exports, module) {
    var ConstrainedTokenIterator, ContextHandler, EquationRangeHandler, LatexParsingContext, Range, TokenIterator, findSurroundingBrackets, initKaTeX, katex;
    LatexParsingContext = require("ace/ext/papeeria/latex_parsing_context");
    TokenIterator = require("ace/token_iterator").TokenIterator;
    Range = require("ace/range").Range;
    findSurroundingBrackets = require("ace/ext/papeeria/highlighter").findSurroundingBrackets;
    katex = null;
    initKaTeX = function(onLoaded) {
      var cssDemoPath, linkDemo, span;
      cssDemoPath = require.toUrl("./katex-demo.css");
      linkDemo = $("<link>").attr({
        rel: "stylesheet",
        href: cssDemoPath
      });
      $("head").append(linkDemo);
      span = $("<span>").attr({
        id: "formula"
      });
      $("body").append(span);
      require(["ace/ext/katex"], function(katexInner) {
        katex = katexInner;
        onLoaded();
      });
    };
    ContextHandler = (function() {
      ContextHandler.UPDATE_DELAY = 1000;

      ContextHandler.KATEX_OPTIONS = {
        displayMode: true,
        throwOnError: false
      };

      ContextHandler.getMacrosArgumentRange = function(session, argumentStartPos) {
        var argumentRange;
        argumentRange = findSurroundingBrackets(session, argumentStartPos);
        if (argumentRange.mismatch) {
          return null;
        } else {
          return new Range(argumentRange.start.row, argumentRange.start.column + 1, argumentRange.end.row, argumentRange.end.column);
        }
      };

      ContextHandler.getWholeEquation = function(session, tokenIterator) {
        var acceptToken, argumentRange, bracketPosition, curLabelParameter, curLabelTokens, curLine, labelParameters, labelSequenceIndex, range, token, tokenPosition, tokenValues;
        tokenValues = [];
        labelSequenceIndex = 0;
        labelParameters = [];
        curLabelParameter = null;
        curLabelTokens = [];
        range = tokenIterator.range;
        token = tokenIterator.getCurrentToken();
        tokenPosition = tokenIterator.getCurrentTokenPosition();
        while (token != null) {
          acceptToken = true;
          if (token.type === "storage.type" && token.value === "\\label") {
            curLine = session.getLine(tokenPosition.row);
            bracketPosition = tokenPosition.column + "\\label".length;
            if (curLine[bracketPosition] === "{") {
              argumentRange = ContextHandler.getMacrosArgumentRange(session, {
                row: tokenPosition.row,
                column: bracketPosition + 1
              });
              if (argumentRange != null) {
                acceptToken = false;
                labelParameters.push(session.getTextRange(argumentRange));
                tokenIterator.stepTo(argumentRange.end.row, argumentRange.end.column + 1);
              }
            }
          }
          if (acceptToken) {
            tokenValues.push(token.value);
          }
          tokenIterator.stepForward();
          token = tokenIterator.getCurrentToken();
          tokenPosition = tokenIterator.getCurrentTokenPosition();
        }
        return [labelParameters, tokenValues.join("")];
      };

      function ContextHandler(editor1, popoverHandler1, equationRangeHandler1, getFormulaElement1) {
        this.editor = editor1;
        this.popoverHandler = popoverHandler1;
        this.equationRangeHandler = equationRangeHandler1;
        this.getFormulaElement = getFormulaElement1;
        this.handleCurrentContext = bind(this.handleCurrentContext, this);
        this.delayedUpdatePopover = bind(this.delayedUpdatePopover, this);
        this.updateCallback = bind(this.updateCallback, this);
        this.updatePosition = bind(this.updatePosition, this);
        this.initPopover = bind(this.initPopover, this);
        this.jqEditorContainer = $(this.editor.container);
        this.contextPreviewExists = false;
      }

      ContextHandler.prototype.getPopoverPosition = function(row) {
        return {
          top: (this.editor.renderer.textToScreenCoordinates(row + 2, 1).pageY) + "px",
          left: (this.jqEditorContainer.position().left) + "px"
        };
      };

      ContextHandler.prototype.getCurrentFormula = function() {
        var e, equationString, error, labelParameters, ref, ref1, startColumn, startRow, title, tokenIterator;
        try {
          ref = this.curRange.start, startRow = ref.row, startColumn = ref.column;
          tokenIterator = new ConstrainedTokenIterator(this.editor.getSession(), this.curRange, startRow, startColumn);
          tokenIterator.stepForward();
          ref1 = ContextHandler.getWholeEquation(this.editor.getSession(), tokenIterator), labelParameters = ref1[0], equationString = ref1[1];
          title = labelParameters.length === 0 ? "Formula" : labelParameters.join(", ");
          return [title, katex.renderToString(equationString, ContextHandler.KATEX_OPTIONS)];
        } catch (error) {
          e = error;
          return ["Error!", e];
        }
      };

      ContextHandler.prototype.initPopover = function() {
        return setTimeout(((function(_this) {
          return function() {
            var popoverPosition, ref, rendered, title;
            popoverPosition = _this.getPopoverPosition(_this.getEquationEndRow());
            ref = _this.getCurrentFormula(), title = ref[0], rendered = ref[1];
            return _this.popoverHandler.show(_this.getFormulaElement(), title, rendered, popoverPosition);
          };
        })(this)), 0);
      };

      ContextHandler.prototype.getEquationEndRow = function() {
        var i;
        i = this.editor.getCursorPosition().row;
        while (LatexParsingContext.getContext(this.editor.getSession(), i) === "equation") {
          i += 1;
        }
        return i;
      };

      ContextHandler.prototype.updatePosition = function() {
        return this.popoverHandler.setPosition(this.getFormulaElement(), this.getPopoverPosition(this.getEquationEndRow()));
      };

      ContextHandler.prototype.updateRange = function() {
        var cursorColumn, cursorRow, ref;
        ref = this.editor.getCursorPosition(), cursorRow = ref.row, cursorColumn = ref.column;
        return this.curRange = this.equationRangeHandler.getEquationRange(cursorRow, cursorColumn);
      };

      ContextHandler.prototype.updatePopover = function() {
        var ref, rendered, title;
        if (this.contextPreviewExists) {
          ref = this.getCurrentFormula(), title = ref[0], rendered = ref[1];
          return this.popoverHandler.setContent(this.getFormulaElement(), title, rendered);
        }
      };

      ContextHandler.prototype.updateCallback = function() {
        var curContext, curTime;
        if (this.lastChangeTime != null) {
          curTime = Date.now();
          if (curTime - this.lastChangeTime > ContextHandler.UPDATE_DELAY) {
            return;
          }
          this.currentDelayedUpdateId = setTimeout(this.updateCallback, ContextHandler.UPDATE_DELAY - (curTime - this.lastChangeTime));
          return this.lastChangeTime = null;
        } else {
          this.currentDelayedUpdateId = null;
          if (this.contextPreviewExists) {
            curContext = LatexParsingContext.getContext(this.editor.getSession(), this.editor.getCursorPosition().row);
            if (curContext !== "equation") {
              return this.destroyContextPreview();
            } else {
              this.updateRange();
              return this.updatePopover();
            }
          }
        }
      };

      ContextHandler.prototype.delayedUpdatePopover = function() {
        var curDocLength;
        curDocLength = this.editor.getSession().getLength();
        if (curDocLength !== this.prevDocLength) {
          setTimeout(this.updatePosition, 0);
          this.prevDocLength = curDocLength;
        }
        if (this.currentDelayedUpdateId != null) {
          this.lastChangeTime = Date.now();
          return;
        }
        return this.currentDelayedUpdateId = setTimeout(this.updateCallback, ContextHandler.UPDATE_DELAY);
      };

      ContextHandler.prototype.createContextPreview = function() {
        this.updateRange();
        this.contextPreviewExists = true;
        if (katex == null) {
          initKaTeX(this.initPopover);
        } else {
          this.initPopover();
        }
        this.prevDocLength = this.editor.getSession().getLength();
        this.editor.on("change", this.delayedUpdatePopover);
        return this.editor.getSession().on("changeScrollTop", this.updatePosition);
      };

      ContextHandler.prototype.destroyContextPreview = function() {
        this.curRange = null;
        this.contextPreviewExists = false;
        this.editor.off("change", this.delayedUpdatePopover);
        this.editor.getSession().off("changeScrollTop", this.updatePosition);
        return this.popoverHandler.destroy(this.getFormulaElement());
      };

      ContextHandler.prototype.handleCurrentContext = function() {
        return setTimeout(((function(_this) {
          return function() {
            var currentContext, cursorColumn, cursorRow, ref;
            if (_this.currentDelayedUpdateId != null) {
              return;
            }
            ref = _this.editor.getCursorPosition(), cursorRow = ref.row, cursorColumn = ref.column;
            currentContext = LatexParsingContext.getContext(_this.editor.getSession(), cursorRow);
            if (_this.contextPreviewExists && currentContext !== "equation") {
              return _this.destroyContextPreview();
            } else if (!_this.contextPreviewExists && currentContext === "equation") {
              return _this.createContextPreview();
            }
          };
        })(this)), 0);
      };

      return ContextHandler;

    })();
    ConstrainedTokenIterator = (function() {
      function ConstrainedTokenIterator(session1, range1, row, column) {
        var curToken, ref, tokenColumn, tokenRange, tokenRow;
        this.session = session1;
        this.range = range1;
        this.tokenIterator = new TokenIterator(this.session, row, column);
        curToken = this.tokenIterator.getCurrentToken();
        if (curToken == null) {
          this.outOfRange = false;
        }
        ref = this.tokenIterator.getCurrentTokenPosition(), tokenRow = ref.row, tokenColumn = ref.column;
        tokenRange = new Range(tokenRow, tokenColumn, tokenRow, tokenColumn + curToken.value.length);
        this.outOfRange = !this.range.containsRange(tokenRange);
      }

      ConstrainedTokenIterator.prototype.getCurrentToken = function() {
        if (!this.outOfRange) {
          return this.tokenIterator.getCurrentToken();
        } else {
          return null;
        }
      };

      ConstrainedTokenIterator.prototype.getCurrentTokenPosition = function() {
        if (!this.outOfRange) {
          return this.tokenIterator.getCurrentTokenPosition();
        } else {
          return null;
        }
      };

      ConstrainedTokenIterator.prototype.stepBackward = function() {
        var curToken, ref, tokenColumn, tokenRange, tokenRow;
        this.tokenIterator.stepBackward();
        curToken = this.tokenIterator.getCurrentToken();
        if (curToken == null) {
          this.outOfRange = true;
          return null;
        }
        ref = this.tokenIterator.getCurrentTokenPosition(), tokenRow = ref.row, tokenColumn = ref.column;
        tokenRange = new Range(tokenRow, tokenColumn, tokenRow, tokenColumn + curToken.value.length);
        if (this.range.containsRange(tokenRange)) {
          this.outOfRange = false;
          return curToken;
        } else {
          this.outOfRange = true;
          return null;
        }
      };

      ConstrainedTokenIterator.prototype.stepForward = function() {
        var curToken, ref, tokenColumn, tokenRange, tokenRow;
        this.tokenIterator.stepForward();
        curToken = this.tokenIterator.getCurrentToken();
        if (curToken == null) {
          this.outOfRange = true;
          return null;
        }
        ref = this.tokenIterator.getCurrentTokenPosition(), tokenRow = ref.row, tokenColumn = ref.column;
        tokenRange = new Range(tokenRow, tokenColumn, tokenRow, tokenColumn + curToken.value.length);
        if (this.range.containsRange(tokenRange)) {
          this.outOfRange = false;
          return curToken;
        } else {
          this.outOfRange = true;
          return null;
        }
      };

      ConstrainedTokenIterator.prototype.stepTo = function(row, column) {
        this.tokenIterator = new TokenIterator(this.session, row, column);
        return this.outOfRange = !this.range.contains(row, column);
      };

      return ConstrainedTokenIterator;

    })();
    EquationRangeHandler = (function() {
      EquationRangeHandler.BEGIN_EQUATION_TOKEN_SEQUENCE = [
        {
          type: "storage.type",
          value: "\\begin"
        }, {
          type: "lparen",
          value: "{"
        }, {
          type: "variable.parameter",
          value: "equation"
        }, {
          type: "rparen",
          value: "}"
        }
      ];

      EquationRangeHandler.END_EQUATION_TOKEN_SEQUENCE = [
        {
          type: "storage.type",
          value: "\\end"
        }, {
          type: "lparen",
          value: "{"
        }, {
          type: "variable.parameter",
          value: "equation"
        }, {
          type: "rparen",
          value: "}"
        }
      ];

      function EquationRangeHandler(editor1) {
        this.editor = editor1;
      }

      EquationRangeHandler.equalTokens = function(token1, token2) {
        return token1.type === token2.type && token1.value === token2.value;
      };

      EquationRangeHandler.prototype.getBoundary = function(tokenIterator, start) {
        var boundarySequence, curEquationBoundary, curSequenceIndex, curToken, curTokenPosition, j, len, moveFromBoundary, moveToBoundary, ref, token;
        moveToBoundary = start ? ((function(_this) {
          return function() {
            return tokenIterator.stepBackward();
          };
        })(this)) : ((function(_this) {
          return function() {
            return tokenIterator.stepForward();
          };
        })(this));
        moveFromBoundary = start ? ((function(_this) {
          return function() {
            return tokenIterator.stepForward();
          };
        })(this)) : ((function(_this) {
          return function() {
            return tokenIterator.stepBackward();
          };
        })(this));
        boundarySequence = (start ? EquationRangeHandler.BEGIN_EQUATION_TOKEN_SEQUENCE.slice(0).reverse() : EquationRangeHandler.END_EQUATION_TOKEN_SEQUENCE);
        if (tokenIterator.getCurrentToken() == null) {
          moveFromBoundary();
          if (tokenIterator.getCurrentToken() == null) {
            return null;
          }
        } else {
          ref = boundarySequence.slice(0).reverse();
          for (j = 0, len = ref.length; j < len; j++) {
            token = ref[j];
            if (EquationRangeHandler.equalTokens(token, tokenIterator.getCurrentToken())) {
              moveFromBoundary();
            }
          }
        }
        curSequenceIndex = 0;
        curEquationBoundary = null;
        while (curSequenceIndex < boundarySequence.length) {
          moveToBoundary();
          curToken = tokenIterator.getCurrentToken();
          if (!curToken) {
            return null;
          }
          if (EquationRangeHandler.equalTokens(boundarySequence[curSequenceIndex], curToken)) {
            if (curSequenceIndex === 0) {
              curTokenPosition = tokenIterator.getCurrentTokenPosition();
              curEquationBoundary = {
                row: curTokenPosition.row,
                column: curTokenPosition.column + (start ? curToken.value.length : 0)
              };
            }
            curSequenceIndex += 1;
          } else {
            curSequenceIndex = 0;
            curEquationBoundary = null;
          }
        }
        return curEquationBoundary;
      };

      EquationRangeHandler.prototype.getEquationRange = function(row, column) {
        var end, start, tokenIterator;
        tokenIterator = new TokenIterator(this.editor.getSession(), row, column);
        end = this.getBoundary(tokenIterator, false);
        start = this.getBoundary(tokenIterator, true);
        if (!((start != null) && (end != null))) {
          return null;
        }
        return new Range(start.row, start.column, end.row, end.column);
      };

      return EquationRangeHandler;

    })();
    exports.ContextHandler = ContextHandler;
    exports.ConstrainedTokenIterator = ConstrainedTokenIterator;
    exports.EquationRangeHandler = EquationRangeHandler;
    exports.setupPreviewer = function(editor, popoverHandler) {
      var KATEX_OPTIONS, SelectionHandler, contextHandler, equationRangeHandler, getFormulaElement, jqEditorContainer, sh;
      if (popoverHandler == null) {
        popoverHandler = {
          options: {
            html: true,
            placement: "bottom",
            trigger: "manual",
            container: editor.container
          },
          show: function(jqPopoverContainer, title, content, position) {
            jqPopoverContainer.css(position);
            popoverHandler.options.content = content;
            popoverHandler.options.title = title;
            jqPopoverContainer.popover(popoverHandler.options);
            jqPopoverContainer.popover("show");
          },
          destroy: function(jqPopoverContainer) {
            return jqPopoverContainer.popover("destroy");
          },
          popoverExists: function(jqPopoverContainer) {
            var ref;
            return ((ref = jqPopoverContainer.data()) != null ? ref.popover : void 0) != null;
          },
          setContent: function(jqPopoverContainer, title, content) {
            var popoverElement;
            popoverElement = jqPopoverContainer.data().popover.tip();
            popoverElement.children(".popover-content").html(content);
            return popoverElement.children(".popover-title").text(title);
          },
          setPosition: function(jqPopoverContainer, position) {
            return jqPopoverContainer.data().popover.tip().css(position);
          }
        };
      }
      jqEditorContainer = $(editor.container);
      KATEX_OPTIONS = {
        displayMode: true,
        throwOnError: false
      };
      equationRangeHandler = new EquationRangeHandler(editor);
      getFormulaElement = function() {
        return $("#formula");
      };
      contextHandler = new ContextHandler(editor, popoverHandler, equationRangeHandler, getFormulaElement);
      sh = SelectionHandler = {
        hideSelectionPopover: function() {
          popoverHandler.destroy(getFormulaElement());
          editor.off("changeSelection", sh.hideSelectionPopover);
          editor.getSession().off("changeScrollTop", sh.hideSelectionPopover);
          editor.getSession().off("changeScrollLeft", sh.hideSelectionPopover);
        },
        renderSelectionUnderCursor: function() {
          var content, cursorColumn, cursorPosition, cursorRow, popoverPosition, ref;
          ref = editor.getCursorPosition(), cursorRow = ref.row, cursorColumn = ref.column;
          cursorPosition = editor.renderer.textToScreenCoordinates(cursorRow, cursorColumn);
          popoverPosition = {
            top: (cursorPosition.pageY + 24) + "px",
            left: cursorPosition.pageX + "px"
          };
          content = katex.renderToString(editor.getSelectedText(), KATEX_OPTIONS);
          popoverHandler.show(getFormulaElement(), "Preview", content, popoverPosition);
          editor.on("changeSelection", sh.hideSelectionPopover);
          editor.getSession().on("changeScrollTop", sh.hideSelectionPopover);
          editor.getSession().on("changeScrollLeft", sh.hideSelectionPopover);
        },
        createPopover: function(editor) {
          if (!ch.contextPreviewExists) {
            if (katex == null) {
              initKaTeX(sh.renderSelectionUnderCursor);
              return;
            }
            return sh.renderSelectionUnderCursor();
          }
        }
      };
      editor.commands.addCommand({
        name: "previewLaTeXFormula",
        bindKey: {
          win: "Alt-p",
          mac: "Alt-p"
        },
        exec: SelectionHandler.createPopover
      });
      editor.on("changeSelection", contextHandler.handleCurrentContext);
    };
  });

}).call(this);
