// Generated by CoffeeScript 1.10.0
(function() {
  define(function(require, exports, module) {
    var latexContextParser;
    latexContextParser = require("ace/ext/papeeria/latex_parsing_context");
    exports.setupPreviewer = function(editor, popoverHandler) {
      var ch, contextHandler, initKaTeX, jqEditorContainer, jqFormula, katex, selectionHandler, sh;
      katex = null;
      popoverHandler = popoverHandler != null ? popoverHandler : {
        options: {
          html: true,
          placement: "bottom",
          trigger: "manual",
          title: "Formula",
          container: editor.container
        },
        show: function(jqPopoverContainer, content, position) {
          jqPopoverContainer.css(position);
          popoverHandler.options.content = content;
          jqPopoverContainer.popover(popoverHandler.options);
          jqPopoverContainer.popover("show");
        },
        destroy: function(jqPopoverContainer) {
          return jqPopoverContainer.popover("destroy");
        },
        popoverExists: function(jqPopoverContainer) {
          return (jqPopoverContainer.data() != null) && (jqPopoverContainer.data().popover != null);
        },
        setContent: function(jqPopoverContainer, content) {
          var jqPopoverElement;
          jqPopoverElement = jqPopoverContainer.data().popover.tip().children(".popover-content");
          return jqPopoverElement.html(content);
        },
        setPosition: function(jqPopoverContainer, position) {
          var jqPopoverElement;
          jqPopoverElement = jqPopoverContainer.data().popover.tip();
          return jqPopoverElement.css(position);
        }
      };
      initKaTeX = function(onLoaded) {
        var cssDemoPath, linkDemo, span;
        cssDemoPath = require.toUrl("./katex-demo.css");
        linkDemo = $("<link>").attr({
          rel: "stylesheet",
          href: cssDemoPath
        });
        $("head").append(linkDemo);
        span = $("<span>").attr({
          id: "formula"
        });
        $("body").append(span);
        require(["ace/ext/katex"], function(katexInner) {
          katex = katexInner;
          onLoaded();
        });
      };
      jqEditorContainer = $(editor.container);
      jqFormula = function() {
        return $("#formula");
      };
      ch = contextHandler = {
        contextPreviewExists: false,
        updateDelay: 1000,
        removeRegex: /\\end\{equation\}|\\begin\{equation\}|\\label\{[^\}]*\}/g,
        getEquationRange: function(cursorRow) {
          var end, i, start;
          i = cursorRow;
          while (latexContextParser.getContext(editor.session, i - 1) === "equation") {
            i -= 1;
          }
          start = i;
          while (latexContextParser.getContext(editor.session, i + 1) === "equation") {
            i += 1;
          }
          end = i;
          return [start, end];
        },
        getWholeEquation: function(start, end) {
          return editor.session.getLines(start, end).join(" ").replace(ch.removeRegex, "");
        },
        getPopoverPosition: function(row) {
          return {
            top: (editor.renderer.textToScreenCoordinates(row + 2, 1).pageY) + "px",
            left: (jqEditorContainer.position().left) + "px"
          };
        },
        getCurrentFormula: function() {
          return katex.renderToString(ch.getWholeEquation(ch.curStart, ch.curEnd), {
            displayMode: true
          });
        },
        initPopover: function() {
          var content, cursorRow, e, error, popoverPosition, ref;
          cursorRow = editor.getCursorPosition().row;
          ref = ch.getEquationRange(cursorRow), ch.curStart = ref[0], ch.curEnd = ref[1];
          popoverPosition = ch.getPopoverPosition(ch.curEnd);
          try {
            return content = ch.getCurrentFormula();
          } catch (error) {
            e = error;
            return content = e;
          } finally {
            popoverHandler.show(jqFormula(), content, popoverPosition);
          }
        },
        updatePopover: function() {
          var content, e, error;
          try {
            return content = ch.getCurrentFormula();
          } catch (error) {
            e = error;
            return content = e;
          } finally {
            popoverHandler.setContent(jqFormula(), content);
          }
        },
        updateCallback: function() {
          var curTime;
          if (ch.lastChangeTime != null) {
            curTime = Date.now();
            ch.currentDelayedUpdateId = setTimeout(ch.updateCallback, ch.updateDelay - (Date.now() - ch.lastChangeTime));
            return ch.lastChangeTime = null;
          } else {
            ch.updatePopover();
            return ch.currentDelayedUpdateId = null;
          }
        },
        delayedUpdatePopover: function() {
          if (ch.currentDelayedUpdateId != null) {
            ch.lastChangeTime = Date.now();
            return;
          }
          return ch.currentDelayedUpdateId = setTimeout(ch.updateCallback, ch.updateDelay);
        },
        updatePosition: function() {
          return popoverHandler.setPosition(jqFormula(), ch.getPopoverPosition(ch.curEnd));
        },
        handleCurrentContext: function() {
          var currentContext;
          currentContext = latexContextParser.getContext(editor.session, editor.getCursorPosition().row);
          if (!ch.contextPreviewExists && currentContext === "equation") {
            ch.contextPreviewExists = true;
            if (katex == null) {
              initKaTeX(ch.initPopover);
            } else {
              ch.initPopover();
            }
            editor.on("change", ch.delayedUpdatePopover);
            return editor.session.on("changeScrollTop", ch.updatePosition);
          } else if (ch.contextPreviewExists && currentContext !== "equation") {
            ch.contextPreviewExists = false;
            editor.off("change", ch.delayedUpdatePopover);
            editor.session.off("changeScrollTop", ch.updatePosition);
            return popoverHandler.destroy(jqFormula());
          }
        }
      };
      sh = selectionHandler = {
        hideSelectionPopover: function() {
          popoverHandler.destroy(jqFormula());
          editor.off("changeSelection", sh.hideSelectionPopover);
          editor.session.off("changeScrollTop", sh.hideSelectionPopover);
          editor.session.off("changeScrollLeft", sh.hideSelectionPopover);
        },
        renderSelectionUnderCursor: function() {
          var content, cursorPosition, e, error, popoverPosition;
          try {
            cursorPosition = $("textarea.ace_text-input").position();
            popoverPosition = {
              top: (cursorPosition.top + 24) + "px",
              left: cursorPosition.left + "px"
            };
            return content = katex.renderToString(editor.getSelectedText(), {
              displayMode: true
            });
          } catch (error) {
            e = error;
            return content = e;
          } finally {
            popoverHandler.show(jqFormula(), content, popoverPosition);
            editor.on("changeSelection", sh.hideSelectionPopover);
            editor.session.on("changeScrollTop", sh.hideSelectionPopover);
            editor.session.on("changeScrollLeft", sh.hideSelectionPopover);
            return;
          }
        },
        createPopover: function(editor) {
          if (!ch.contextPreviewExists) {
            if (katex == null) {
              initKaTeX(sh.renderSelectionUnderCursor);
              return;
            }
            return sh.renderSelectionUnderCursor();
          }
        }
      };
      editor.commands.addCommand({
        name: "previewLaTeXFormula",
        bindKey: {
          win: "Alt-p",
          mac: "Alt-p"
        },
        exec: selectionHandler.createPopover
      });
      editor.on("changeSelection", contextHandler.handleCurrentContext);
    };
  });

}).call(this);
