// Generated by CoffeeScript 1.10.0
(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  define(function(require, exports, module) {
    var ConstrainedTokenIterator, ContextHandler, EquationRangeHandler, LatexParsingContext, Range, TokenIterator, equalTokens, findSurroundingBrackets, initKaTeX, katex, myKatexLoader;
    LatexParsingContext = require("ace/ext/papeeria/latex_parsing_context");
    TokenIterator = require("ace/token_iterator").TokenIterator;
    Range = require("ace/range").Range;
    findSurroundingBrackets = require("ace/ext/papeeria/highlighter").findSurroundingBrackets;
    myKatexLoader = null;
    katex = null;
    initKaTeX = function(onLoaded) {
      if (myKatexLoader == null) {
        myKatexLoader = function(consumer) {
          return require(["ace/ext/katex"], function(katexInner) {
            return consumer(katexInner);
          });
        };
      }
      return myKatexLoader(function(katexInner) {
        katex = katexInner;
        return onLoaded();
      });
    };
    equalTokens = function(token1, token2) {
      return token1.type === token2.type && token1.value.trim() === token2.value.trim();
    };
    ContextHandler = (function() {
      ContextHandler.UPDATE_DELAY = 1000;

      ContextHandler.KATEX_OPTIONS = {
        displayMode: true,
        throwOnError: false
      };

      ContextHandler.getMacrosArgumentRange = function(session, argumentStartPos) {
        var argumentRange;
        argumentRange = findSurroundingBrackets(session, argumentStartPos);
        if (argumentRange.mismatch) {
          return null;
        } else {
          return new Range(argumentRange.start.row, argumentRange.start.column + 1, argumentRange.end.row, argumentRange.end.column);
        }
      };

      ContextHandler.getWholeEquation = function(session, tokenIterator) {
        var acceptToken, argumentRange, bracketPosition, curLabelParameter, curLabelTokens, curLine, labelParameters, labelSequenceIndex, range, token, tokenPosition, tokenValues;
        tokenValues = [];
        labelSequenceIndex = 0;
        labelParameters = [];
        curLabelParameter = null;
        curLabelTokens = [];
        range = tokenIterator.range;
        token = tokenIterator.getCurrentToken();
        tokenPosition = tokenIterator.getCurrentTokenPosition();
        while (token != null) {
          acceptToken = true;
          if (token.type === "storage.type.equation" && token.value === "\\label") {
            curLine = session.getLine(tokenPosition.row);
            bracketPosition = tokenPosition.column + "\\label".length;
            if (curLine[bracketPosition] === "{") {
              argumentRange = ContextHandler.getMacrosArgumentRange(session, {
                row: tokenPosition.row,
                column: bracketPosition + 1
              });
              if (argumentRange != null) {
                acceptToken = false;
                labelParameters.push(session.getTextRange(argumentRange));
                tokenIterator.stepTo(argumentRange.end.row, argumentRange.end.column + 1);
              }
            }
          }
          if (acceptToken) {
            tokenValues.push(token.value);
          }
          tokenIterator.stepForward();
          token = tokenIterator.getCurrentToken();
          tokenPosition = tokenIterator.getCurrentTokenPosition();
        }
        return {
          params: labelParameters,
          equation: tokenValues.join("")
        };
      };

      function ContextHandler(editor1, popoverHandler1, equationRangeHandler1, I18N1) {
        this.editor = editor1;
        this.popoverHandler = popoverHandler1;
        this.equationRangeHandler = equationRangeHandler1;
        this.I18N = I18N1;
        this.handleCurrentContext = bind(this.handleCurrentContext, this);
        this.delayedUpdatePopover = bind(this.delayedUpdatePopover, this);
        this.updateCallback = bind(this.updateCallback, this);
        this.updatePosition = bind(this.updatePosition, this);
        this.initPopover = bind(this.initPopover, this);
        this.jqEditorContainer = $(this.editor.container);
        this.contextPreviewExists = false;
        this.rangeCorrect = false;
        this.currentRange = null;
      }

      ContextHandler.prototype.getPopoverPosition = function(row) {
        return {
          top: (this.editor.renderer.textToScreenCoordinates(row + 2, 1).pageY) + "px",
          left: (this.jqEditorContainer.position().left) + "px"
        };
      };

      ContextHandler.prototype.getCurrentFormula = function() {
        var e, equationString, error, labelParameters, ref, start, title, tokenIterator;
        try {
          if (this.currentRange == null) {
            throw "Inconsistent state";
          }
          if (!this.rangeCorrect) {
            throw "<div style=\"text-align:center\"><p>" + (this.messages.join("\n")) + "</p></div>";
          }
          start = this.currentRange.start;
          tokenIterator = new ConstrainedTokenIterator(this.editor.getSession(), this.currentRange, start.row, start.column);
          if (start.column !== 0) {
            tokenIterator.stepForward();
          }
          ref = ContextHandler.getWholeEquation(this.editor.getSession(), tokenIterator), labelParameters = ref.params, equationString = ref.equation;
          title = labelParameters.length === 0 ? "Formula" : labelParameters.join(", ");
          return {
            title: title,
            content: katex.renderToString(equationString, ContextHandler.KATEX_OPTIONS)
          };
        } catch (error) {
          e = error;
          return {
            title: "Error!",
            content: e
          };
        }
      };

      ContextHandler.prototype.initPopover = function() {
        var popoverPosition, ref, rendered, title;
        popoverPosition = this.getPopoverPosition(this.getEquationEndRow());
        ref = this.getCurrentFormula(), title = ref.title, rendered = ref.content;
        return this.popoverHandler.show(title, rendered, popoverPosition);
      };

      ContextHandler.prototype.getEquationEndRow = function() {
        var i;
        i = this.editor.getCursorPosition().row;
        while (LatexParsingContext.getContext(this.editor.getSession(), i) === "equation") {
          i += 1;
        }
        return i;
      };

      ContextHandler.prototype.updatePosition = function() {
        return this.popoverHandler.setPosition(this.getPopoverPosition(this.getEquationEndRow()));
      };

      ContextHandler.prototype.updateRange = function() {
        var cursorPos, reason, reasons, ref;
        cursorPos = this.editor.getCursorPosition();
        ref = this.equationRangeHandler.getEquationRange(cursorPos.row, cursorPos.column), this.rangeCorrect = ref.correct, reasons = ref.reasons, this.currentRange = ref.range;
        return this.messages = (function() {
          var j, len, results;
          results = [];
          for (j = 0, len = reasons.length; j < len; j++) {
            reason = reasons[j];
            results.push(this.I18N.text(reason));
          }
          return results;
        }).call(this);
      };

      ContextHandler.prototype.destroyRange = function() {
        this.currentRange = null;
        return this.rangeCorrect = false;
      };

      ContextHandler.prototype.updatePopover = function() {
        var ref, rendered, title;
        if (this.contextPreviewExists) {
          ref = this.getCurrentFormula(), title = ref.title, rendered = ref.content;
          return this.popoverHandler.setContent(title, rendered);
        }
      };

      ContextHandler.prototype.updateCallback = function() {
        var curContext, curTime, cursorPos;
        if (this.lastChangeTime != null) {
          curTime = Date.now();
          if (curTime - this.lastChangeTime > ContextHandler.UPDATE_DELAY) {
            return;
          }
          this.currentDelayedUpdateId = setTimeout(this.updateCallback, ContextHandler.UPDATE_DELAY - (curTime - this.lastChangeTime));
          return this.lastChangeTime = null;
        } else {
          this.currentDelayedUpdateId = null;
          cursorPos = this.editor.getCursorPosition();
          curContext = LatexParsingContext.getContext(this.editor.getSession(), cursorPos.row, cursorPos.column);
          if (curContext === "equation") {
            this.updateRange();
          } else {
            this.destroyRange();
            this.disableUpdates();
          }
          if (this.currentRange != null) {
            if (this.contextPreviewExists) {
              return this.updatePopover();
            } else {
              return this.createContextPreview();
            }
          } else {
            return this.destroyContextPreview();
          }
        }
      };

      ContextHandler.prototype.delayedUpdatePopover = function() {
        var curDocLength;
        curDocLength = this.editor.getSession().getLength();
        if (this.contextPreviewExists && curDocLength !== this.prevDocLength) {
          setTimeout(this.updatePosition, 0);
          this.prevDocLength = curDocLength;
        }
        if (this.currentDelayedUpdateId != null) {
          this.lastChangeTime = Date.now();
          return;
        }
        return this.currentDelayedUpdateId = setTimeout(this.updateCallback, ContextHandler.UPDATE_DELAY);
      };

      ContextHandler.prototype.createContextPreview = function() {
        this.contextPreviewExists = true;
        if (katex == null) {
          return initKaTeX(this.initPopover);
        } else {
          return this.initPopover();
        }
      };

      ContextHandler.prototype.enableUpdates = function() {
        this.prevDocLength = this.editor.getSession().getLength();
        this.editor.on("change", this.delayedUpdatePopover);
        return this.editor.getSession().on("changeScrollTop", this.updatePosition);
      };

      ContextHandler.prototype.disableUpdates = function() {
        this.currentDelayedUpdateId = null;
        this.editor.off("change", this.delayedUpdatePopover);
        return this.editor.getSession().off("changeScrollTop", this.updatePosition);
      };

      ContextHandler.prototype.destroyContextPreview = function() {
        this.contextPreviewExists = false;
        return this.popoverHandler.destroy();
      };

      ContextHandler.prototype.destroyEverything = function() {
        this.destroyRange();
        this.disableUpdates();
        return this.destroyContextPreview();
      };

      ContextHandler.prototype.handleCurrentContext = function() {
        return setTimeout(((function(_this) {
          return function() {
            var currentContext, cursorPos;
            if (_this.currentDelayedUpdateId != null) {
              return;
            }
            cursorPos = _this.editor.getCursorPosition();
            currentContext = LatexParsingContext.getContext(_this.editor.getSession(), cursorPos.row, cursorPos.column);
            if ((_this.currentRange != null) && !_this.currentRange.contains(cursorPos.row, cursorPos.column)) {
              _this.destroyRange();
              _this.disableUpdates();
            }
            if ((_this.currentRange == null) && _this.contextPreviewExists) {
              _this.destroyContextPreview();
            }
            if ((_this.currentRange == null) && currentContext === "equation") {
              _this.updateRange();
              _this.enableUpdates();
            }
            if ((_this.currentRange != null) && !_this.contextPreviewExists) {
              return _this.createContextPreview();
            }
          };
        })(this)), 0);
      };

      return ContextHandler;

    })();
    ConstrainedTokenIterator = (function() {
      function ConstrainedTokenIterator(session1, range1, row, column) {
        var curToken, ref, tokenColumn, tokenRange, tokenRow;
        this.session = session1;
        this.range = range1;
        this.tokenIterator = new TokenIterator(this.session, row, column);
        curToken = this.tokenIterator.getCurrentToken();
        if (curToken == null) {
          this.outOfRange = false;
        }
        ref = this.tokenIterator.getCurrentTokenPosition(), tokenRow = ref.row, tokenColumn = ref.column;
        tokenRange = new Range(tokenRow, tokenColumn, tokenRow, tokenColumn + curToken.value.length);
        this.outOfRange = !this.range.containsRange(tokenRange);
      }

      ConstrainedTokenIterator.prototype.getCurrentToken = function() {
        if (!this.outOfRange) {
          return this.tokenIterator.getCurrentToken();
        } else {
          return null;
        }
      };

      ConstrainedTokenIterator.prototype.getCurrentTokenPosition = function() {
        if (!this.outOfRange) {
          return this.tokenIterator.getCurrentTokenPosition();
        } else {
          return null;
        }
      };

      ConstrainedTokenIterator.prototype.stepBackward = function() {
        var curToken, ref, tokenColumn, tokenRange, tokenRow;
        this.tokenIterator.stepBackward();
        curToken = this.tokenIterator.getCurrentToken();
        if (curToken == null) {
          this.outOfRange = true;
          return null;
        }
        ref = this.tokenIterator.getCurrentTokenPosition(), tokenRow = ref.row, tokenColumn = ref.column;
        tokenRange = new Range(tokenRow, tokenColumn, tokenRow, tokenColumn + curToken.value.length);
        if (this.range.containsRange(tokenRange)) {
          this.outOfRange = false;
          return curToken;
        } else {
          this.outOfRange = true;
          return null;
        }
      };

      ConstrainedTokenIterator.prototype.stepForward = function() {
        var curToken, ref, tokenColumn, tokenRange, tokenRow;
        this.tokenIterator.stepForward();
        curToken = this.tokenIterator.getCurrentToken();
        if (curToken == null) {
          this.outOfRange = true;
          return null;
        }
        ref = this.tokenIterator.getCurrentTokenPosition(), tokenRow = ref.row, tokenColumn = ref.column;
        tokenRange = new Range(tokenRow, tokenColumn, tokenRow, tokenColumn + curToken.value.length);
        if (this.range.containsRange(tokenRange)) {
          this.outOfRange = false;
          return curToken;
        } else {
          this.outOfRange = true;
          return null;
        }
      };

      ConstrainedTokenIterator.prototype.stepTo = function(row, column) {
        this.tokenIterator = new TokenIterator(this.session, row, column);
        return this.outOfRange = !this.range.contains(row, column);
      };

      return ConstrainedTokenIterator;

    })();
    EquationRangeHandler = (function() {
      EquationRangeHandler.BEGIN_EQUATION_TOKEN_SEQUENCES = [
        [
          {
            type: "rparen",
            value: "}"
          }, {
            type: "variable.parameter",
            value: "equation"
          }, {
            type: "lparen",
            value: "{"
          }, {
            type: "storage.type",
            value: "\\begin"
          }
        ], [
          {
            type: "rparen",
            value: "}"
          }, {
            type: "variable.parameter",
            value: "equation*"
          }, {
            type: "lparen",
            value: "{"
          }, {
            type: "storage.type",
            value: "\\begin"
          }
        ], [
          {
            type: "string",
            value: "\\["
          }
        ], [
          {
            type: "string",
            value: "\\("
          }
        ], [
          {
            type: "string",
            value: "$"
          }
        ], [
          {
            type: "string",
            value: "$$"
          }
        ]
      ];

      EquationRangeHandler.END_EQUATION_TOKEN_SEQUENCES = [
        [
          {
            type: "storage.type",
            value: "\\end"
          }, {
            type: "lparen",
            value: "{"
          }, {
            type: "variable.parameter",
            value: "equation"
          }, {
            type: "rparen",
            value: "}"
          }
        ], [
          {
            type: "storage.type",
            value: "\\end"
          }, {
            type: "lparen",
            value: "{"
          }, {
            type: "variable.parameter",
            value: "equation*"
          }, {
            type: "rparen",
            value: "}"
          }
        ], [
          {
            type: "string",
            value: "\\]"
          }
        ], [
          {
            type: "string",
            value: "\\)"
          }
        ], [
          {
            type: "string",
            value: "$"
          }
        ], [
          {
            type: "string",
            value: "$$"
          }
        ]
      ];

      function EquationRangeHandler(editor1) {
        this.editor = editor1;
      }

      EquationRangeHandler.prototype.getBoundary = function(tokenIterator, start) {
        var boundaryCorrect, boundarySequences, curTokenColumn, curTokenLength, curTokenRow, currentRow, currentToken, moveFromBoundary, moveToBoundary, prevRow, reasonCode, ref;
        moveToBoundary = start ? ((function(_this) {
          return function() {
            return tokenIterator.stepBackward();
          };
        })(this)) : ((function(_this) {
          return function() {
            return tokenIterator.stepForward();
          };
        })(this));
        moveFromBoundary = start ? ((function(_this) {
          return function() {
            return tokenIterator.stepForward();
          };
        })(this)) : ((function(_this) {
          return function() {
            return tokenIterator.stepBackward();
          };
        })(this));
        boundarySequences = (start ? EquationRangeHandler.BEGIN_EQUATION_TOKEN_SEQUENCES : EquationRangeHandler.END_EQUATION_TOKEN_SEQUENCES);
        currentToken = tokenIterator.getCurrentToken();
        prevRow = tokenIterator.getCurrentTokenPosition().row;
        boundaryCorrect = true;
        reasonCode = null;
        while (LatexParsingContext.isType(currentToken, "equation")) {
          currentToken = moveToBoundary();
          if (currentToken == null) {
            boundaryCorrect = false;
            reasonCode = "js.math_preview.error.document_end";
            break;
          }
          currentRow = tokenIterator.getCurrentTokenPosition().row;
          if (Math.abs(currentRow - prevRow) > 1) {
            boundaryCorrect = false;
            reasonCode = "js.math_preview.error.empty_line";
            break;
          }
          prevRow = currentRow;
        }
        if ((currentToken != null) && LatexParsingContext.isType(currentToken, "error")) {
          boundaryCorrect = false;
          reasonCode = "js.math_preview.error.whitespace_line";
        }
        moveFromBoundary();
        ref = tokenIterator.getCurrentTokenPosition(), curTokenRow = ref.row, curTokenColumn = ref.column;
        curTokenLength = tokenIterator.getCurrentToken().value.length;
        return {
          correct: boundaryCorrect,
          reason: reasonCode,
          row: curTokenRow,
          column: curTokenColumn + (start ? 0 : curTokenLength)
        };
      };

      EquationRangeHandler.prototype.getEquationRange = function(row, column) {
        var end, reasons, start, tokenIterator;
        tokenIterator = new TokenIterator(this.editor.getSession(), row, column);
        start = this.getBoundary(tokenIterator, true);
        tokenIterator = new TokenIterator(this.editor.getSession(), row, column);
        end = this.getBoundary(tokenIterator, false);
        reasons = [];
        if (!start.correct) {
          reasons.push(start.reason);
        }
        if (!end.correct) {
          reasons.push(end.reason);
        }
        return {
          correct: start.correct && end.correct,
          reasons: reasons,
          range: new Range(start.row, start.column, end.row, end.column)
        };
      };

      return EquationRangeHandler;

    })();
    exports.ContextHandler = ContextHandler;
    exports.ConstrainedTokenIterator = ConstrainedTokenIterator;
    exports.EquationRangeHandler = EquationRangeHandler;
    exports.setupPreviewer = function(editor, popoverHandler, katexLoader, I18N) {
      var KATEX_OPTIONS, contextHandler, equationRangeHandler, jqEditorContainer, selectionHandler, sh;
      myKatexLoader = katexLoader;
      jqEditorContainer = $(editor.container);
      KATEX_OPTIONS = {
        displayMode: true,
        throwOnError: false
      };
      equationRangeHandler = new EquationRangeHandler(editor);
      contextHandler = new ContextHandler(editor, popoverHandler, equationRangeHandler, I18N);
      exports.reset = function() {
        if (contextHandler.contextPreviewExists) {
          return contextHandler.destroyEverything();
        }
      };
      sh = selectionHandler = {
        hideSelectionPopover: function() {
          popoverHandler.destroy();
          editor.off("changeSelection", sh.hideSelectionPopover);
          editor.getSession().off("changeScrollTop", sh.hideSelectionPopover);
          return editor.getSession().off("changeScrollLeft", sh.hideSelectionPopover);
        },
        renderSelectionUnderCursor: function() {
          var content, cursorPos, cursorPosition, popoverPosition;
          cursorPos = editor.getCursorPosition();
          cursorPosition = editor.renderer.textToScreenCoordinates(cursorPos.row, cursorPos.column);
          popoverPosition = {
            top: (cursorPosition.pageY + 24) + "px",
            left: cursorPosition.pageX + "px"
          };
          content = katex.renderToString(editor.getSelectedText(), KATEX_OPTIONS);
          popoverHandler.show("Preview", content, popoverPosition);
          editor.on("changeSelection", sh.hideSelectionPopover);
          editor.getSession().on("changeScrollTop", sh.hideSelectionPopover);
          return editor.getSession().on("changeScrollLeft", sh.hideSelectionPopover);
        },
        createPopover: function(editor) {
          if (!contextHandler.contextPreviewExists) {
            if (katex == null) {
              initKaTeX(sh.renderSelectionUnderCursor);
              return;
            }
            return sh.renderSelectionUnderCursor();
          }
        }
      };
      exports.SelectionHandler = selectionHandler;
      return editor.on("changeSelection", contextHandler.handleCurrentContext);
    };
  });

}).call(this);

//# sourceMappingURL=katex-previewer.js.map
