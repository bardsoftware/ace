// Generated by CoffeeScript 1.12.6
(function() {
  define(function(require, exports, module) {
    var COMMENT_TOKENTYPE, CONTEXT_TOKENTYPES, ENVIRONMENT_TOKENTYPE, EQUATION_TOKENTYPE, ESCAPE_TOKENTYPE, LIST_TOKENTYPE, LPAREN_TOKENTYPE, PapeeriaLatexHighlightRules, RPAREN_TOKENTYPE, SPECIFIC_TOKEN_FOR_STATE, getContext, getContextFromRow, isType;
    PapeeriaLatexHighlightRules = require("ace/ext/papeeria/papeeria_latex_highlight_rules");
    COMMENT_TOKENTYPE = PapeeriaLatexHighlightRules.COMMENT_TOKENTYPE, ESCAPE_TOKENTYPE = PapeeriaLatexHighlightRules.ESCAPE_TOKENTYPE, LPAREN_TOKENTYPE = PapeeriaLatexHighlightRules.LPAREN_TOKENTYPE, RPAREN_TOKENTYPE = PapeeriaLatexHighlightRules.RPAREN_TOKENTYPE, LIST_TOKENTYPE = PapeeriaLatexHighlightRules.LIST_TOKENTYPE, EQUATION_TOKENTYPE = PapeeriaLatexHighlightRules.EQUATION_TOKENTYPE, ENVIRONMENT_TOKENTYPE = PapeeriaLatexHighlightRules.ENVIRONMENT_TOKENTYPE, SPECIFIC_TOKEN_FOR_STATE = PapeeriaLatexHighlightRules.SPECIFIC_TOKEN_FOR_STATE;
    CONTEXT_TOKENTYPES = [COMMENT_TOKENTYPE, EQUATION_TOKENTYPE, ENVIRONMENT_TOKENTYPE, LIST_TOKENTYPE];
    isType = function(token, type) {
      return token.type.indexOf(type) > -1;
    };

    /*
     * @param {(number, number) pos}
     *
     * Returns context at cursor position.
     */
    getContext = function(session, row, column) {
      var i, j, nextColumn, nextRow, nextToken, prevState, ref, ref1, ref2, token;
      ref = session.doc.indexToPosition(session.doc.positionToIndex({
        row: row,
        column: column
      }, row) + 1, row), nextRow = ref.row, nextColumn = ref.column;
      token = session.getTokenAt(row, column);
      nextToken = session.getTokenAt(nextRow, nextColumn);
      if (token != null) {
        for (i = j = 0, ref1 = CONTEXT_TOKENTYPES.length - 1; 0 <= ref1 ? j <= ref1 : j >= ref1; i = 0 <= ref1 ? ++j : --j) {
          if (isType(token, CONTEXT_TOKENTYPES[i]) || (nextToken != null) && isType(nextToken, CONTEXT_TOKENTYPES[i])) {
            return CONTEXT_TOKENTYPES[i];
          }
        }
      } else {
        if (row > 0) {
          prevState = session.getState(row - 1);
          prevState = typeof prevState === "string" ? prevState : prevState[prevState.length - 1];
          return (ref2 = SPECIFIC_TOKEN_FOR_STATE[prevState]) != null ? ref2 : "start";
        }
      }
      return "start";
    };
    getContextFromRow = function(session, row) {
      var states;
      states = session.getState(row);
      if (Array.isArray(states)) {
        return states[states.length - 1];
      } else {
        return states;
      }
    };
    exports.getContext = getContext;
    exports.isType = isType;
  });

}).call(this);

//# sourceMappingURL=latex_parsing_context.js.map
