// Generated by CoffeeScript 1.12.6
(function() {
  define(function(require, exports, module) {
    var COMMENT_CONTEXT, COMMENT_TOKENTYPE, CONTEXTS_FOR_TOKENTYPES, CONTEXT_TOKENTYPES, ENVIRONMENT_CONTEXT, ENVIRONMENT_TOKENTYPE, EQUATION_CONTEXT, EQUATION_TOKENTYPE, LIST_CONTEXT, LIST_TOKENTYPE, SPECIFIC_TOKEN_FOR_STATE, START_CONTEXT, getContext, isType, ref;
    ref = require("ace/ext/papeeria/papeeria_latex_highlight_rules"), COMMENT_TOKENTYPE = ref.COMMENT_TOKENTYPE, LIST_TOKENTYPE = ref.LIST_TOKENTYPE, EQUATION_TOKENTYPE = ref.EQUATION_TOKENTYPE, ENVIRONMENT_TOKENTYPE = ref.ENVIRONMENT_TOKENTYPE, SPECIFIC_TOKEN_FOR_STATE = ref.SPECIFIC_TOKEN_FOR_STATE, isType = ref.isType;
    exports.COMMENT_CONTEXT = COMMENT_CONTEXT = COMMENT_TOKENTYPE;
    exports.EQUATION_CONTEXT = EQUATION_CONTEXT = EQUATION_TOKENTYPE;
    exports.ENVIRONMENT_CONTEXT = ENVIRONMENT_CONTEXT = ENVIRONMENT_TOKENTYPE;
    exports.LIST_CONTEXT = LIST_CONTEXT = LIST_TOKENTYPE;
    exports.START_CONTEXT = START_CONTEXT = "start";
    CONTEXT_TOKENTYPES = [EQUATION_TOKENTYPE, COMMENT_TOKENTYPE, ENVIRONMENT_TOKENTYPE, LIST_TOKENTYPE];
    CONTEXTS_FOR_TOKENTYPES = {};
    CONTEXTS_FOR_TOKENTYPES[COMMENT_TOKENTYPE] = COMMENT_CONTEXT;
    CONTEXTS_FOR_TOKENTYPES[EQUATION_TOKENTYPE] = EQUATION_CONTEXT;
    CONTEXTS_FOR_TOKENTYPES[ENVIRONMENT_TOKENTYPE] = ENVIRONMENT_CONTEXT;
    CONTEXTS_FOR_TOKENTYPES[LIST_TOKENTYPE] = LIST_CONTEXT;
    getContext = function(session, row, column) {
      var contextTokentype, i, len, nextColumn, nextRow, nextToken, prevState, ref1, token, tokentype;
      if (column > 0) {
        ref1 = session.doc.indexToPosition(session.doc.positionToIndex({
          row: row,
          column: column
        }, row) + 1, row), nextRow = ref1.row, nextColumn = ref1.column;
        token = session.getTokenAt(row, column);
        nextToken = session.getTokenAt(nextRow, nextColumn);
        for (i = 0, len = CONTEXT_TOKENTYPES.length; i < len; i++) {
          contextTokentype = CONTEXT_TOKENTYPES[i];
          if (isType(token, contextTokentype) || (nextToken != null) && isType(nextToken, contextTokentype)) {
            return CONTEXTS_FOR_TOKENTYPES[contextTokentype];
          }
        }
      } else {
        if (row > 0) {
          prevState = session.getState(row - 1);
          prevState = (typeof prevState === "string" ? prevState : prevState[prevState.length - 1]);
          tokentype = SPECIFIC_TOKEN_FOR_STATE[prevState];
          return (tokentype != null ? CONTEXTS_FOR_TOKENTYPES[tokentype] : START_CONTEXT);
        }
      }
      return START_CONTEXT;
    };
    exports.getContext = getContext;
  });

}).call(this);

//# sourceMappingURL=latex_parsing_context.js.map
