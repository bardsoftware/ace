// Generated by CoffeeScript 1.12.6
(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  define(function() {
    var Spellchecker, makeSet, mySpellchecker;
    makeSet = function(array) {
      var i, len, set, v;
      set = {};
      for (i = 0, len = array.length; i < len; i++) {
        v = array[i];
        set[v] = true;
      }
      return set;
    };
    Spellchecker = (function() {
      function Spellchecker(editor1) {
        this.editor = editor1;
        this.isWordTypo = bind(this.isWordTypo, this);
        this.getCorrections = bind(this.getCorrections, this);
        this.onHashUpdated = bind(this.onHashUpdated, this);
        this.onSettingsUpdated = bind(this.onSettingsUpdated, this);
        this._fetchTypos = bind(this._fetchTypos, this);
        this.typosHash = null;
        this.language = null;
        this.asyncFetchTypos = function() {};
        this.asyncFetchSuggestions = function() {};
        this.typos = {};
      }

      Spellchecker.prototype._fetchTypos = function(hash) {
        return this.asyncFetchTypos(this.language, (function(_this) {
          return function(typosArray) {
            _this.editor.getSession()._emit("updateSpellcheckingTypos", {
              typos: typosArray
            });
            _this.typos = makeSet(typosArray);
            return _this.typosHash = hash;
          };
        })(this));
      };

      Spellchecker.prototype.onSettingsUpdated = function(settings, asyncFetchTypos, asyncFetchSuggestions) {
        this.language = settings.tag;
        this.asyncFetchTypos = asyncFetchTypos;
        this.asyncFetchSuggestions = asyncFetchSuggestions;
        this.editor.getSession()._emit("changeSpellingCheckSettings", settings);
        return this._fetchTypos(null);
      };

      Spellchecker.prototype.onHashUpdated = function(typosHash) {
        if (this.typosHash !== typosHash) {
          return this._fetchTypos(typosHash);
        }
      };

      Spellchecker.prototype.getCorrections = function(token, callback) {
        return this.asyncFetchSuggestions(token, this.language, callback);
      };

      Spellchecker.prototype.isWordTypo = function(word) {
        return !!this.typos[word];
      };

      return Spellchecker;

    })();
    mySpellchecker = null;
    return {
      getInstance: function() {
        if (mySpellchecker != null) {
          return mySpellchecker;
        } else {
          throw new Error("Spellchecker has not been initialized");
        }
      },
      setup: function(editor) {
        if (mySpellchecker != null) {
          throw new Error("Spellchecker has already been initialized");
        } else {
          return mySpellchecker = new Spellchecker(editor);
        }
      }
    };
  });

}).call(this);
