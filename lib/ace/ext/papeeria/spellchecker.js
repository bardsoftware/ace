// Generated by CoffeeScript 1.10.0
(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  define(function(require, exports, module) {
    var PopupManager, SpellChecker, TEST_JSON_TYPOS, convertCorrectionList, extractWord, getCurrentWordRange;
    TEST_JSON_TYPOS = {
      "blablabla": ["blah-blah-blah", "blabber", "blabbed", "salable"]
    };
    SpellChecker = (function() {
      function SpellChecker() {
        this.check = bind(this.check, this);
      }

      SpellChecker.prototype.getJson = function() {
        return TEST_JSON_TYPOS;
      };

      SpellChecker.prototype.check = function(token) {
        var correctionsList;
        correctionsList = this.getJson();
        return !correctionsList[token];
      };

      SpellChecker.prototype.getCorrections = function(token) {
        if (!this.check(token)) {
          return this.getJson()[token];
        }
      };

      return SpellChecker;

    })();
    exports.setupSpellCheckerPopup = function(editor) {
      var newPopup;
      PopupManager.init(editor);
      newPopup = function() {
        var correctionsItem, spellChecker, word;
        word = extractWord(editor);
        spellChecker = new SpellChecker();
        correctionsItem = spellChecker.getCorrections(word);
        if (correctionsItem) {
          PopupManager.show(convertCorrectionList(correctionsItem));
        }
      };
      editor.commands.addCommand({
        name: "newPopup",
        bindKey: "Alt-Enter",
        exec: newPopup
      });
    };
    extractWord = function(editor) {
      var row, session, wordRange;
      session = editor.session;
      row = editor.getCursorPosition().row;
      wordRange = getCurrentWordRange(editor);
      return session.getTextRange(wordRange).replace(/\s\s*$/, '');
    };
    getCurrentWordRange = function(editor) {
      var col, row, session;
      session = editor.session;
      row = editor.getCursorPosition().row;
      col = editor.getCursorPosition().column;
      return session.getAWordRange(row, col);
    };
    convertCorrectionList = function(corrections) {
      var i, item, len, options;
      options = [];
      for (i = 0, len = corrections.length; i < len; i++) {
        item = corrections[i];
        options.push({
          caption: item,
          value: item
        });
      }
      return options;
    };
    PopupManager = {
      commands: {
        "Esc": function() {
          return PopupManager.detach();
        },
        "Up": function() {
          return PopupManager.goTo("up");
        },
        "Down": function() {
          return PopupManager.goTo("down");
        },
        "Return": function() {
          return PopupManager.insertCorrection();
        }
      },
      init: function(editor) {
        var AcePopup, HashHandler;
        this.editor = editor;
        HashHandler = require("ace/keyboard/hash_handler").HashHandler;
        AcePopup = require("ace/autocomplete/popup").AcePopup;
        this.popup = new AcePopup(document.body);
        this.popup.setTheme(editor.getTheme());
        this.popup.setFontSize(editor.getFontSize());
        this.popup.on("click", (function(_this) {
          return function(e) {
            _this.insertCorrection();
            return e.stop();
          };
        })(this));
        this.session = editor.session;
        this.keyboard = new HashHandler();
        this.keyboard.bindKeys(this.commands);
        if (editor != null) {
          this.detach;
        }
      },
      show: function(options) {
        var lineHeight, pos, position, rect, renderer;
        this.options = options;
        this.popup.setData(options);
        this.editor.keyBinding.addKeyboardHandler(this.keyboard);
        position = this.editor.getCursorPosition();
        this.base = this.session.doc.createAnchor(position.row, position.column);
        if (typeof editor !== "undefined" && editor !== null) {
          PopupManager.detach;
        }
        this.editor.on("change", this.changeListener);
        this.editor.on("changeSelection", this.changeSelectionListener);
        this.editor.on("blur", this.blurListener);
        this.editor.on("mousedown", this.mousedownListener);
        this.editor.on("mousewheel", this.mousewheelListener);
        this.editor.$blockScrolling = Infinity;
        this.activated = true;
        renderer = this.editor.renderer;
        lineHeight = renderer.layerConfig.lineHeight;
        pos = renderer.$cursorLayer.getPixelPosition(this.base, true);
        pos.left -= this.popup.getTextLeftOffset();
        rect = this.editor.container.getBoundingClientRect();
        pos.top += rect.top - renderer.layerConfig.offset;
        pos.left += rect.left - this.editor.renderer.scrollLeft;
        pos.left += renderer.gutterWidth;
        this.popup.show(pos, lineHeight);
      },
      detach: function() {
        if (this.popup && this.popup.isOpen) {
          this.popup.hide();
        }
        if (this.base) {
          this.base.detach();
        }
        this.editor.keyBinding.removeKeyboardHandler(this.keyboard);
        this.editor.off("change", this.changeListener);
        this.editor.off("changeSelection", this.changeSelectionListener);
        this.editor.off("blur", this.blurListener);
        this.editor.off("mousedown", this.mousedownListener);
        this.editor.off("mousewheel", this.mousewheelListener);
        this.activated = false;
      },
      insertCorrection: function() {
        var correction, row, word, wordRange;
        PopupManager.detach();
        row = PopupManager.popup.getRow();
        correction = PopupManager.options[row].value;
        wordRange = getCurrentWordRange(PopupManager.editor);
        word = PopupManager.editor.session.getTextRange(wordRange);
        if (indexOf.call(word, ' ') >= 0) {
          wordRange.end.column--;
        }
        PopupManager.editor.session.replace(wordRange, correction);
      },
      goTo: function(where) {
        var max, row;
        row = this.popup.getRow();
        max = this.popup.session.getLength() - 1;
        switch (where) {
          case "up":
            if (row <= 0) {
              row = max;
            } else {
              row = row - 1;
            }
            break;
          case "down":
            if (row >= max) {
              row = -1;
            } else {
              row = row + 1;
            }
            break;
          case "start":
            row = 0;
            break;
          case "end":
            row = max;
        }
        this.popup.setRow(row);
      },
      changeListener: function(e) {
        PopupManager.detach();
      },
      changeSelectionListener: function(e) {
        var cursor;
        cursor = PopupManager.editor.selection.lead;
        if (cursor.row !== this.base.row || cursor.column < this.base.column) {
          PopupManager.detach();
        }
        if (!this.activated) {
          PopupManager.detach();
        }
      },
      blurListener: function(e) {
        var container, element, text;
        element = document.activeElement;
        text = PopupManager.editor.textInput.getElement();
        container = this.popup && this.popup.container;
        if (element !== text && element.parentNode !== container && e.relatedTarget !== text) {
          PopupManager.detach();
        }
      },
      mousedownListener: function(e) {
        PopupManager.detach();
      },
      mousewheelListener: function(e) {
        PopupManager.detach();
      }
    };
    exports.SpellChecker = SpellChecker;
  });

}).call(this);

//# sourceMappingURL=spellchecker.js.map
