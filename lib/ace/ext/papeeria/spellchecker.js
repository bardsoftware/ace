// Generated by CoffeeScript 1.10.0
(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  define(function(require, exports, module) {
    var SpellChecker, TEST_JSON_TYPOS;
    TEST_JSON_TYPOS = {
      "blablabla": ["blah-blah", "blabber", "blabbed", "salable"]
    };
    exports.SpellChecker = SpellChecker = (function() {
      function SpellChecker() {
        this.check = bind(this.check, this);
        this.getJson = bind(this.getJson, this);
      }

      SpellChecker.prototype.getJson = function() {
        return TEST_JSON_TYPOS;
      };

      SpellChecker.prototype.check = function(token) {
        var correctionsList;
        correctionsList = this.getJson();
        return !correctionsList[token];
      };

      return SpellChecker;

    })();
    exports.setupSpellCheckerPopup = function(editor) {
      var convertCorrectionList, extractWord, showPopup, tryPopup;
      showPopup = (function(_this) {
        return function(options) {
          var AcePopup, HashHandler, event, lineHeight, pos, rect, ref, renderer, util;
          AcePopup = require("ace/autocomplete/popup").AcePopup;
          util = require("ace/autocomplete/util");
          HashHandler = require("ace/keyboard/hash_handler").HashHandler;
          event = require("ace/lib/event");
          _this.popup = new AcePopup((ref = document.body) != null ? ref : document.documentElement);
          _this.popup.setData(options);
          _this.popup.setTheme(editor.getTheme());
          _this.popup.setFontSize(editor.getFontSize());
          _this.commands = {
            "Esc": function(editor) {
              this.popup.hide();
              editor.keyBinding.removeKeyboardHandler(this.keyboard);
              return console.log("esc");
            }
          };
          _this.keyboard = new HashHandler();
          _this.keyboard.bindKeys(_this.commands);
          editor.keyBinding.addKeyboardHandler(_this.keyboard);
          renderer = editor.renderer;
          lineHeight = renderer.layerConfig.lineHeight;
          pos = renderer.$cursorLayer.getPixelPosition(_this.base, true);
          pos.left -= _this.popup.getTextLeftOffset();
          rect = editor.container.getBoundingClientRect();
          pos.top += rect.top - renderer.layerConfig.offset;
          pos.left += rect.left - editor.renderer.scrollLeft;
          pos.left += renderer.gutterWidth;
          _this.popup.show(pos, lineHeight);
        };
      })(this);
      convertCorrectionList = function(corrections) {
        var i, item, len, options;
        options = [];
        for (i = 0, len = corrections.length; i < len; i++) {
          item = corrections[i];
          options.push({
            caption: item,
            value: item
          });
        }
        return options;
      };
      extractWord = function() {
        var col, end, row, session, start, wordPosition;
        session = editor.session;
        row = editor.getCursorPosition().row;
        col = editor.getCursorPosition().column;
        wordPosition = session.getAWordRange(row, col);
        start = wordPosition.start.column;
        end = wordPosition.end.column;
        return session.getLine(row).substring(start, end).replace(/\s\s*$/, '');
      };
      tryPopup = function() {
        var correctionsList, spellChecker, word;
        word = extractWord();
        spellChecker = new SpellChecker();
        correctionsList = spellChecker.getJson();
        if (correctionsList[word]) {
          showPopup(convertCorrectionList(correctionsList[word]));
        }
      };
      editor.commands.addCommand({
        name: "test",
        bindKey: "Alt-Enter",
        exec: tryPopup
      });
    };
  });

}).call(this);

//# sourceMappingURL=spellchecker.js.map
