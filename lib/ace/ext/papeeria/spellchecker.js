// Generated by CoffeeScript 1.10.0
(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  define(function(require, exports, module) {
    var SpellChecker, TEST_JSON_TYPOS;
    TEST_JSON_TYPOS = {
      "blablabla": ["blah-blah-blah", "blabber", "blabbed", "salable"]
    };
    SpellChecker = (function() {
      function SpellChecker() {
        this.check = bind(this.check, this);
      }

      SpellChecker.prototype.getJson = function() {
        return TEST_JSON_TYPOS;
      };

      SpellChecker.prototype.check = function(token) {
        var correctionsList;
        correctionsList = this.getJson();
        return !correctionsList[token];
      };

      SpellChecker.prototype.getCorrections = function(token) {
        if (!this.check(token)) {
          return this.getJson()[token];
        }
      };

      return SpellChecker;

    })();
    exports.setupSpellCheckerPopup = function(editor) {
      var convertCorrectionList, extractWord, getCurrentWordRange, showPopup, tryPopup;
      showPopup = (function(_this) {
        return function(options) {
          var AcePopup, HashHandler, event, util;
          AcePopup = require("ace/autocomplete/popup").AcePopup;
          util = require("ace/autocomplete/util");
          HashHandler = require("ace/keyboard/hash_handler").HashHandler;
          event = require("ace/lib/event");
          _this.init = function() {
            var lineHeight, pos, position, rect, renderer, session;
            this.popup = new AcePopup(document.body);
            this.popup.setData(options);
            this.popup.setTheme(editor.getTheme());
            this.popup.setFontSize(editor.getFontSize());
            this.popup.on("click", (function(_this) {
              return function(e) {
                _this.insertCorrection();
                return e.stop();
              };
            })(this));
            session = editor.session;
            position = editor.getCursorPosition();
            this.base = session.doc.createAnchor(position.row, position.column);
            this.keyboard = new HashHandler();
            this.keyboard.bindKeys(this.commands);
            editor.keyBinding.addKeyboardHandler(this.keyboard);
            if (editor != null) {
              this.detach;
            }
            editor.on("change", this.changeListener);
            editor.on("changeSelection", this.changeSelectionListener);
            editor.on("blur", this.blurListener);
            editor.on("mousedown", this.mousedownListener);
            editor.on("mousewheel", this.mousewheelListener);
            editor.$blockScrolling = Infinity;
            this.activated = true;
            renderer = editor.renderer;
            lineHeight = renderer.layerConfig.lineHeight;
            pos = renderer.$cursorLayer.getPixelPosition(this.base, true);
            pos.left -= this.popup.getTextLeftOffset();
            rect = editor.container.getBoundingClientRect();
            pos.top += rect.top - renderer.layerConfig.offset;
            pos.left += rect.left - editor.renderer.scrollLeft;
            pos.left += renderer.gutterWidth;
            this.popup.show(pos, lineHeight);
          };
          _this.goTo = function(where) {
            var max, row;
            row = this.popup.getRow();
            max = this.popup.session.getLength() - 1;
            switch (where) {
              case "up":
                if (row <= 0) {
                  row = max;
                } else {
                  row = row - 1;
                }
                break;
              case "down":
                if (row >= max) {
                  row = -1;
                } else {
                  row = row + 1;
                }
                break;
              case "start":
                row = 0;
                break;
              case "end":
                row = max;
            }
            this.popup.setRow(row);
          };
          _this.detach = function() {
            if (this.popup && this.popup.isOpen) {
              this.popup.hide();
            }
            if (this.base) {
              this.base.detach();
            }
            editor.keyBinding.removeKeyboardHandler(this.keyboard);
            editor.off("change", this.changeListener);
            editor.off("changeSelection", this.changeSelectionListener);
            editor.off("blur", this.blurListener);
            editor.off("mousedown", this.mousedownListener);
            editor.off("mousewheel", this.mousewheelListener);
            this.activated = false;
          };
          _this.commands = {
            "Esc": function() {
              return _this.detach();
            },
            "Up": function() {
              return _this.goTo("up");
            },
            "Down": function() {
              return _this.goTo("down");
            },
            "Return": function() {
              return _this.insertCorrection();
            }
          };
          _this.changeListener = function(e) {
            _this.detach();
          };
          _this.changeSelectionListener = function(e) {
            var cursor;
            cursor = editor.selection.lead;
            if (cursor.row !== _this.base.row || cursor.column < _this.base.column) {
              _this.detach();
            }
            if (!_this.activated) {
              _this.detach();
            }
          };
          _this.blurListener = function(e) {
            var container, element, text;
            element = document.activeElement;
            text = editor.textInput.getElement();
            container = _this.popup && _this.popup.container;
            if (element !== text && element.parentNode !== container && e.relatedTarget !== text) {
              _this.detach();
            }
          };
          _this.mousedownListener = function(e) {
            _this.detach();
          };
          _this.mousewheelListener = function(e) {
            _this.detach();
          };
          _this.insertCorrection = function() {
            var correction, row, word, wordRange;
            _this.detach();
            row = _this.popup.getRow();
            correction = options[row].value;
            wordRange = getCurrentWordRange();
            word = editor.session.getTextRange(wordRange);
            if (indexOf.call(word, ' ') >= 0) {
              wordRange.end.column--;
            }
            editor.session.replace(wordRange, correction);
          };
          _this.init();
        };
      })(this);
      convertCorrectionList = function(corrections) {
        var i, item, len, options;
        options = [];
        for (i = 0, len = corrections.length; i < len; i++) {
          item = corrections[i];
          options.push({
            caption: item,
            value: item
          });
        }
        return options;
      };
      getCurrentWordRange = function() {
        var col, row, session;
        session = editor.session;
        row = editor.getCursorPosition().row;
        col = editor.getCursorPosition().column;
        return session.getAWordRange(row, col);
      };
      extractWord = function() {
        var end, row, session, start, wordRange;
        session = editor.session;
        row = editor.getCursorPosition().row;
        wordRange = getCurrentWordRange();
        start = wordRange.start.column;
        end = wordRange.end.column;
        return session.getTextRange(wordRange).replace(/\s\s*$/, '');
      };
      tryPopup = function() {
        var correctionsItem, spellChecker, word;
        word = extractWord();
        spellChecker = new SpellChecker();
        correctionsItem = spellChecker.getCorrections(word);
        if (correctionsItem) {
          showPopup(convertCorrectionList(correctionsItem));
        }
      };
      editor.commands.addCommand({
        name: "test",
        bindKey: "Alt-Enter",
        exec: tryPopup
      });
    };
    exports.SpellChecker = SpellChecker;
  });

}).call(this);

//# sourceMappingURL=spellchecker.js.map
