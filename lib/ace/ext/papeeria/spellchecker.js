// Generated by CoffeeScript 1.11.1
(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  define(function() {
    var Spellchecker, mySpellchecker;
    Spellchecker = (function() {
      function Spellchecker(editor1, onError) {
        this.editor = editor1;
        this.onError = onError != null ? onError : function() {};
        this.getCorrections = bind(this.getCorrections, this);
        this.onSessionUpdated = bind(this.onSessionUpdated, this);
        this.onHashUpdated = bind(this.onHashUpdated, this);
        this.onSettingsUpdated = bind(this.onSettingsUpdated, this);
        this._fetchTypos = bind(this._fetchTypos, this);
        this.typosUrl = null;
        this.suggestionsUrl = null;
        this.typosHash = null;
        this.language = null;
      }

      Spellchecker.prototype._fetchTypos = function(hash) {
        return $.getJSON(this.typosUrl, null, (function(_this) {
          return function(typosArray) {
            _this.editor.getSession()._emit("updateSpellcheckingTypos", {
              typos: typosArray
            });
            return _this.typosHash = hash;
          };
        })(this)).fail(this.onError);
      };

      Spellchecker.prototype.onSettingsUpdated = function(settings) {
        this.language = settings.language;
        return this.editor.getSession()._emit("changeSpellingCheckSettings", settings);
      };

      Spellchecker.prototype.onHashUpdated = function(typosHash) {
        if (this.typosHash !== typosHash) {
          return this._fetchTypos(typosHash);
        }
      };

      Spellchecker.prototype.onSessionUpdated = function(typosUrl, suggestionsUrl) {
        this.typosUrl = typosUrl;
        this.suggestionsUrl = suggestionsUrl;
        return this._fetchTypos(this.typosHash);
      };

      Spellchecker.prototype.getCorrections = function(token, callback) {
        return $.getJSON(this.suggestionsUrl, {
          typo: token,
          language: this.language
        }, callback).fail(this.onError);
      };

      return Spellchecker;

    })();
    mySpellchecker = null;
    return {
      getInstance: function() {
        if (mySpellchecker != null) {
          return mySpellchecker;
        } else {
          throw new Error("Spellchecker has not been initialized");
        }
      },
      setup: function(editor) {
        if (mySpellchecker != null) {
          throw new Error("Spellchecker has already been initialized");
        } else {
          return mySpellchecker = new Spellchecker(editor);
        }
      }
    };
  });

}).call(this);
