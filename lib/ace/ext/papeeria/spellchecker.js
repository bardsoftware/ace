// Generated by CoffeeScript 1.11.1
(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  define(function() {
    var Spellchecker, mySpellchecker;
    Spellchecker = (function() {
      function Spellchecker(editor1) {
        this.editor = editor1;
        this.getCorrections = bind(this.getCorrections, this);
        this.check = bind(this.check, this);
        this.onSessionUpdated = bind(this.onSessionUpdated, this);
        this.onSettingsUpdated = bind(this.onSettingsUpdated, this);
        this._fetchTypos = bind(this._fetchTypos, this);
        this._init = bind(this._init, this);
        this._init(null);
        this.typosUrl = null;
        this.suggestionsUrl = null;
        this.typosHash = null;
      }

      Spellchecker.prototype._init = function(language) {
        this.language = language;
        return this.typos = {};
      };

      Spellchecker.prototype._fetchTypos = function() {
        return $.getJSON(this.typosUrl, null, (function(_this) {
          return function(typosArray) {
            var i, len, tmp, typo;
            tmp = {};
            for (i = 0, len = typosArray.length; i < len; i++) {
              typo = typosArray[i];
              tmp[typo] = true;
            }
            _this.typos = tmp;
            return _this.editor.getSession()._emit("updateSpellcheckingTypos", {
              typos: typosArray
            });
          };
        })(this));
      };

      Spellchecker.prototype.onSettingsUpdated = function(settings) {
        this._init(settings.language);
        return this.editor.getSession()._emit("changeSpellingCheckSettings", settings);
      };

      Spellchecker.prototype.onSessionUpdated = function(session) {
        this.typosUrl = session.typosUrl;
        this.suggestionsUrl = session.suggestionsUrl;
        if (this.typosHash !== session.typosHash) {
          this.typosHash = session.typosHash;
          return this._fetchTypos();
        }
      };

      Spellchecker.prototype.check = function(token) {
        return !(token in this.typos);
      };

      Spellchecker.prototype.getCorrections = function(token, callback) {
        if (!this.check(token)) {
          return $.getJSON(this.suggestionsUrl, {
            typo: token,
            language: this.language
          }, callback);
        }
      };

      return Spellchecker;

    })();
    mySpellchecker = null;
    return {
      getInstance: function() {
        if (mySpellchecker != null) {
          return mySpellchecker;
        } else {
          throw new Error("Spellchecker is not initialized");
        }
      },
      setup: function(editor) {
        return mySpellchecker = new Spellchecker(editor);
      }
    };
  });

}).call(this);
