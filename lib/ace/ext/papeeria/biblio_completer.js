// Generated by CoffeeScript 1.12.4
(function() {
  var foo,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  foo = null;

  define(function(require, exports, module) {
    var Autocomplete, BiblioCompleter, BiblioFilesCompleter, LatexParsingContext, lang, util;
    LatexParsingContext = require("ace/ext/papeeria/latex_parsing_context");
    Autocomplete = require('ace/autocomplete');
    util = require("ace/autocomplete/util");
    lang = require("../../lib/lang");
    BiblioFilesCompleter = (function(superClass) {
      extend(BiblioFilesCompleter, superClass);

      function BiblioFilesCompleter() {
        this.detach = bind(this.detach, this);
        this.insertMatch = bind(this.insertMatch, this);
        this.updateCompletions = bind(this.updateCompletions, this);
        this._doCreate = bind(this._doCreate, this);
        this._doInsert = bind(this._doInsert, this);
        this.setInsertCallback = bind(this.setInsertCallback, this);
        this.setCreateCallback = bind(this.setCreateCallback, this);
        this._setCompletions = bind(this._setCompletions, this);
        this.setFiles = bind(this.setFiles, this);
        BiblioFilesCompleter.__super__.constructor.call(this);
      }

      BiblioFilesCompleter.prototype.setFiles = function(files) {
        return this.files = files;
      };

      BiblioFilesCompleter.prototype._setCompletions = function() {
        var matches;
        matches = this.files.map(function(file) {
          return {
            name: file.name,
            file: file,
            meta: file.path,
            completer: this
          };
        });
        matches.push({
          name: "Create new file",
          meta: "",
          completer: this
        });
        return this.completions = new Autocomplete.FilteredList(matches);
      };

      BiblioFilesCompleter.prototype.setCreateCallback = function(callback) {
        return this.createCallback = callback;
      };

      BiblioFilesCompleter.prototype.setInsertCallback = function(callback) {
        return this.insertCallback = callback;
      };

      BiblioFilesCompleter.prototype._doInsert = function(file) {
        if (typeof this.insertCallback === "function") {
          this.insertCallback(file);
        }
        return this.detach();
      };

      BiblioFilesCompleter.prototype._doCreate = function() {
        return typeof this.createCallback === "function" ? this.createCallback(((function(_this) {
          return function() {
            return _this.editor.completer = null;
          };
        })(this)), this._doInsert) : void 0;
      };

      BiblioFilesCompleter.prototype.updateCompletions = function(keepPopupPosition) {
        var prefix;
        this._setCompletions();
        prefix = util.getCompletionPrefix(this.editor);
        return this.openPopup(this.editor, prefix, keepPopupPosition);
      };

      BiblioFilesCompleter.prototype.insertMatch = function(editor, data) {
        if (data == null) {
          data = this.popup.getData(this.popup.getRow());
        }
        if (data == null) {
          this.detach();
          return;
        }
        if (data.name === "Create new file") {
          return this._doCreate();
        } else {
          return this._doInsert(data.file);
        }
      };

      BiblioFilesCompleter.prototype.detach = function() {
        this.editor.completer = new Autocomplete.Autocomplete();
        return BiblioFilesCompleter.__super__.detach.call(this);
      };

      return BiblioFilesCompleter;

    })(Autocomplete.Autocomplete);
    BiblioCompleter = (function() {
      function BiblioCompleter() {
        this.insertMatch = bind(this.insertMatch, this);
        this.setImportCallback = bind(this.setImportCallback, this);
        this.setSearchCallback = bind(this.setSearchCallback, this);
        this.getCompletions = bind(this.getCompletions, this);
        this.setEnabledMendeley = bind(this.setEnabledMendeley, this);
        this.enabledMendeley = false;
      }

      BiblioCompleter.prototype.setEnabledMendeley = function(enabledMendeley) {
        return this.enabledMendeley = enabledMendeley;
      };

      BiblioCompleter.prototype.getCompletions = function(editor, session, pos, prefix, callback) {
        var default_result, token;
        token = session.getTokenAt(pos.row, pos.column);
        if (LatexParsingContext.isType(token, "cite")) {
          default_result = [
            {
              name: "Search",
              snippet: "Search " + prefix,
              meta: "",
              score: 1000,
              meta_score: 10,
              completer: this
            }
          ];
          if (this.enabledMendeley) {
            default_result.push({
              name: "Import",
              snippet: "Import " + prefix,
              meta: "from Mendeley",
              score: 1000,
              meta_score: 10,
              completer: this
            });
          }
          callback(null, default_result);
          return;
        }
        callback(null, []);
      };

      BiblioCompleter.prototype.setSearchCallback = function(callback) {
        return this.searchCallback = callback;
      };

      BiblioCompleter.prototype.setImportCallback = function(callback) {
        return this.importCallback = callback;
      };

      BiblioCompleter.prototype.insertMatch = function(editor, data) {
        var prefix;
        editor.completer.detach();
        editor.completer = null;
        if (data.name === "Search") {
          prefix = util.getCompletionPrefix(editor);
          if (typeof this.searchCallback === "function") {
            this.searchCallback({
              query: prefix,
              insertCallback: (function(_this) {
                return function(completer) {
                  return completer != null ? completer.showPopup(editor) : void 0;
                };
              })(this)
            });
          }
          return;
        }
        if (data.name === "Import") {
          return typeof this.importCallback === "function" ? this.importCallback() : void 0;
        }
      };

      return BiblioCompleter;

    })();
    return {
      BiblioCompleter: BiblioCompleter,
      BiblioFilesCompleter: BiblioFilesCompleter
    };
  });

}).call(this);
