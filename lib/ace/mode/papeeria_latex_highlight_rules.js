// Generated by CoffeeScript 1.9.3
(function() {
  define(function(require, exports, module) {
    'use strict';
    var PapeeriaLatexHighlightRules, TextHighlightRules, oop;
    oop = require('../lib/oop');
    TextHighlightRules = require('./text_highlight_rules').TextHighlightRules;
    PapeeriaLatexHighlightRules = function() {
      var basicRules, key, popState, pushState, rule;
      pushState = function(destination) {
        return function(currentState, stack) {
          if (currentState === 'start') {
            stack.push(currentState, destination);
          } else {
            stack.push(destination);
          }
          return destination;
        };
      };
      popState = function(currentState, stack) {
        return stack.pop() || 'start';
      };
      basicRules = [
        {
          token: 'comment',
          regex: '%.*$'
        }, {
          token: ['keyword', 'lparen', 'variable.parameter', 'rparen', 'lparen', 'storage.type', 'rparen'],
          regex: '(\\\\(?:documentclass|usepackage|input))(?:(\\[)([^\\]]*)(\\]))?({)([^}]*)(})'
        }, {
          token: ['keyword', 'lparen', 'variable.parameter', 'rparen'],
          regex: '(\\\\(?:label|v?ref|cite(?:[^{]*)))(?:({)([^}]*)(}))?'
        }, {
          token: ['storage.type', 'lparen', 'variable.parameter', 'rparen'],
          regex: '(\\\\(?:begin|end))({)(\\w*)(})'
        }, {
          token: 'storage.type',
          regex: '\\\\[a-zA-Z]+'
        }, {
          token: 'lparen',
          regex: '[[({]'
        }, {
          token: 'rparen',
          regex: '[\\])}]'
        }, {
          token: 'constant.character.escape',
          regex: '\\\\[^a-zA-Z]?'
        }
      ];
      this.$rules = {
        'start': [
          {
            token: ['storage.type', 'lparen', 'variable.parameter', 'rparen'],
            regex: '(\\\\(?:begin))({)(itemize|enumerate)(})',
            next: pushState('list')
          }, {
            token: ['storage.type', 'lparen', 'variable.parameter', 'rparen'],
            regex: '(\\\\(?:begin))({)(equation|equation\\*)(})',
            next: pushState('equation')
          }
        ],
        'equation': [
          {
            token: ['storage.type', 'lparen', 'variable.parameter', 'rparen'],
            regex: '(\\\\(?:begin))({)(equation|equation\\*)(})',
            next: pushState('equation')
          }, {
            token: ['storage.type', 'lparen', 'variable.parameter', 'rparen'],
            regex: '(\\\\(?:end))({)(equation|equation\\*)(})',
            next: popState
          }, {
            token: ['storage.type', 'lparen', 'variable.parameter', 'rparen'],
            regex: '(\\\\(?:begin))({)(itemize|enumerate|descriprion)(})',
            next: pushState('list')
          }
        ],
        'list': [
          {
            token: ['storage.type', 'lparen', 'variable.parameter', 'rparen'],
            regex: '(\\\\(?:begin))({)(itemize|enumerate)(})',
            next: pushState("list")
          }, {
            token: ['storage.type', 'lparen', 'variable.parameter', 'rparen'],
            regex: '(\\\\(?:end))({)(itemize|enumerate|description)(})',
            next: popState
          }, {
            token: ['storage.type', 'lparen', 'variable.parameter', 'rparen'],
            regex: '(\\\\(?:begin))({)(equation|equation\\*)(})',
            next: pushState('equation')
          }
        ]
      };
      for (key in this.$rules) {
        for (rule in basicRules) {
          this.$rules[key].push(basicRules[rule]);
        }
      }
      console.log('asss', pushState);
    };
    oop.inherits(PapeeriaLatexHighlightRules, TextHighlightRules);
    exports.PapeeriaLatexHighlightRules = PapeeriaLatexHighlightRules;
  });

}).call(this);
